// Code generated from /var/antlrResult/Modelica.g4 by ANTLR 4.8. DO NOT EDIT.

package parser // Modelica

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa


var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 96, 1062, 
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13, 
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9, 
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23, 
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4, 
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34, 
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9, 
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44, 
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4, 
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55, 
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9, 
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65, 
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4, 
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76, 
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9, 
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86, 
	4, 87, 9, 87, 4, 88, 9, 88, 3, 2, 3, 2, 5, 2, 179, 10, 2, 3, 2, 7, 2, 182, 
	10, 2, 12, 2, 14, 2, 185, 11, 2, 3, 2, 5, 2, 188, 10, 2, 3, 2, 3, 2, 3, 
	2, 7, 2, 193, 10, 2, 12, 2, 14, 2, 196, 11, 2, 3, 3, 5, 3, 199, 10, 3, 
	3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 4, 5, 4, 207, 10, 4, 3, 5, 5, 5, 210, 
	10, 5, 3, 5, 3, 5, 3, 5, 5, 5, 215, 10, 5, 3, 5, 3, 5, 3, 5, 5, 5, 220, 
	10, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 226, 10, 5, 3, 5, 5, 5, 229, 10, 5, 
	3, 5, 3, 5, 5, 5, 233, 10, 5, 3, 6, 3, 6, 5, 6, 237, 10, 6, 3, 6, 3, 6, 
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 246, 10, 6, 3, 6, 5, 6, 249, 10, 6, 
	3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 255, 10, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 
	5, 7, 262, 10, 7, 3, 7, 5, 7, 265, 10, 7, 3, 7, 5, 7, 268, 10, 7, 3, 7, 
	5, 7, 271, 10, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 278, 10, 7, 3, 7, 
	5, 7, 281, 10, 7, 3, 7, 3, 7, 5, 7, 285, 10, 7, 3, 7, 5, 7, 288, 10, 7, 
	5, 7, 290, 10, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 
	7, 8, 301, 10, 8, 12, 8, 14, 8, 304, 11, 8, 3, 8, 3, 8, 5, 8, 308, 10, 
	8, 3, 8, 5, 8, 311, 10, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 7, 10, 318, 
	10, 10, 12, 10, 14, 10, 321, 11, 10, 3, 11, 3, 11, 5, 11, 325, 10, 11, 
	3, 11, 5, 11, 328, 10, 11, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 
	12, 7, 12, 337, 10, 12, 12, 12, 14, 12, 340, 11, 12, 3, 12, 3, 12, 5, 12, 
	344, 10, 12, 3, 12, 5, 12, 347, 10, 12, 3, 12, 5, 12, 350, 10, 12, 3, 12, 
	5, 12, 353, 10, 12, 3, 12, 3, 12, 3, 12, 5, 12, 358, 10, 12, 3, 13, 3, 
	13, 3, 14, 3, 14, 3, 15, 3, 15, 3, 15, 5, 15, 367, 10, 15, 3, 15, 3, 15, 
	3, 15, 5, 15, 372, 10, 15, 3, 15, 3, 15, 3, 16, 3, 16, 3, 16, 7, 16, 379, 
	10, 16, 12, 16, 14, 16, 382, 11, 16, 3, 17, 3, 17, 3, 17, 5, 17, 387, 10, 
	17, 3, 17, 5, 17, 390, 10, 17, 3, 17, 5, 17, 393, 10, 17, 3, 17, 5, 17, 
	396, 10, 17, 3, 17, 3, 17, 5, 17, 400, 10, 17, 3, 17, 3, 17, 3, 17, 5, 
	17, 405, 10, 17, 3, 17, 3, 17, 5, 17, 409, 10, 17, 3, 17, 5, 17, 412, 10, 
	17, 5, 17, 414, 10, 17, 5, 17, 416, 10, 17, 5, 17, 418, 10, 17, 3, 18, 
	3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 
	18, 3, 18, 5, 18, 433, 10, 18, 3, 18, 5, 18, 436, 10, 18, 3, 18, 5, 18, 
	439, 10, 18, 3, 19, 3, 19, 3, 19, 7, 19, 444, 10, 19, 12, 19, 14, 19, 447, 
	11, 19, 3, 20, 3, 20, 3, 20, 5, 20, 452, 10, 20, 3, 20, 5, 20, 455, 10, 
	20, 3, 21, 3, 21, 3, 21, 5, 21, 460, 10, 21, 3, 22, 3, 22, 3, 22, 5, 22, 
	465, 10, 22, 3, 22, 3, 22, 3, 23, 5, 23, 470, 10, 23, 3, 23, 5, 23, 473, 
	10, 23, 3, 23, 5, 23, 476, 10, 23, 3, 24, 3, 24, 3, 25, 3, 25, 3, 25, 7, 
	25, 483, 10, 25, 12, 25, 14, 25, 486, 11, 25, 3, 26, 3, 26, 5, 26, 490, 
	10, 26, 3, 26, 5, 26, 493, 10, 26, 3, 26, 5, 26, 496, 10, 26, 3, 27, 3, 
	27, 3, 27, 3, 28, 3, 28, 5, 28, 503, 10, 28, 3, 28, 5, 28, 506, 10, 28, 
	3, 29, 3, 29, 3, 29, 5, 29, 511, 10, 29, 3, 29, 3, 29, 3, 29, 3, 29, 5, 
	29, 517, 10, 29, 3, 30, 3, 30, 5, 30, 521, 10, 30, 3, 30, 3, 30, 3, 31, 
	3, 31, 3, 31, 7, 31, 528, 10, 31, 12, 31, 14, 31, 531, 11, 31, 3, 32, 3, 
	32, 5, 32, 535, 10, 32, 3, 33, 5, 33, 538, 10, 33, 3, 33, 5, 33, 541, 10, 
	33, 3, 33, 3, 33, 5, 33, 545, 10, 33, 3, 34, 3, 34, 5, 34, 549, 10, 34, 
	3, 34, 5, 34, 552, 10, 34, 3, 35, 3, 35, 5, 35, 556, 10, 35, 3, 35, 5, 
	35, 559, 10, 35, 3, 35, 3, 35, 5, 35, 563, 10, 35, 3, 35, 5, 35, 566, 10, 
	35, 3, 36, 3, 36, 3, 36, 5, 36, 571, 10, 36, 3, 36, 5, 36, 574, 10, 36, 
	3, 37, 3, 37, 3, 37, 3, 37, 3, 38, 3, 38, 5, 38, 582, 10, 38, 3, 38, 5, 
	38, 585, 10, 38, 3, 39, 3, 39, 3, 39, 3, 40, 5, 40, 591, 10, 40, 3, 40, 
	3, 40, 5, 40, 595, 10, 40, 3, 41, 3, 41, 3, 41, 6, 41, 600, 10, 41, 13, 
	41, 14, 41, 601, 3, 42, 5, 42, 605, 10, 42, 3, 42, 3, 42, 5, 42, 609, 10, 
	42, 3, 43, 3, 43, 3, 43, 6, 43, 614, 10, 43, 13, 43, 14, 43, 615, 3, 44, 
	3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 5, 
	44, 629, 10, 44, 3, 44, 5, 44, 632, 10, 44, 3, 44, 5, 44, 635, 10, 44, 
	3, 45, 3, 45, 3, 45, 3, 45, 5, 45, 641, 10, 45, 3, 45, 3, 45, 3, 45, 3, 
	45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 5, 45, 
	656, 10, 45, 3, 45, 5, 45, 659, 10, 45, 3, 45, 5, 45, 662, 10, 45, 3, 46, 
	3, 46, 3, 46, 3, 46, 5, 46, 668, 10, 46, 3, 46, 3, 46, 3, 46, 3, 46, 5, 
	46, 674, 10, 46, 7, 46, 676, 10, 46, 12, 46, 14, 46, 679, 11, 46, 3, 46, 
	3, 46, 5, 46, 683, 10, 46, 5, 46, 685, 10, 46, 3, 46, 3, 46, 3, 46, 3, 
	47, 3, 47, 3, 47, 3, 47, 5, 47, 694, 10, 47, 3, 47, 3, 47, 3, 47, 3, 47, 
	5, 47, 700, 10, 47, 7, 47, 702, 10, 47, 12, 47, 14, 47, 705, 11, 47, 3, 
	47, 3, 47, 5, 47, 709, 10, 47, 5, 47, 711, 10, 47, 3, 47, 3, 47, 3, 47, 
	3, 48, 3, 48, 3, 48, 6, 48, 719, 10, 48, 13, 48, 14, 48, 720, 3, 48, 3, 
	48, 3, 48, 6, 48, 726, 10, 48, 13, 48, 14, 48, 727, 5, 48, 730, 10, 48, 
	3, 49, 3, 49, 3, 49, 3, 49, 5, 49, 736, 10, 49, 3, 49, 3, 49, 3, 49, 3, 
	50, 3, 50, 3, 50, 3, 50, 5, 50, 745, 10, 50, 3, 50, 3, 50, 3, 50, 3, 51, 
	3, 51, 3, 51, 7, 51, 753, 10, 51, 12, 51, 14, 51, 756, 11, 51, 3, 52, 3, 
	52, 3, 52, 5, 52, 761, 10, 52, 3, 53, 3, 53, 3, 53, 3, 53, 5, 53, 767, 
	10, 53, 3, 53, 3, 53, 3, 53, 3, 54, 3, 54, 3, 54, 3, 54, 5, 54, 776, 10, 
	54, 3, 54, 3, 54, 3, 54, 3, 54, 5, 54, 782, 10, 54, 7, 54, 784, 10, 54, 
	12, 54, 14, 54, 787, 11, 54, 3, 54, 3, 54, 3, 54, 3, 55, 3, 55, 3, 55, 
	3, 55, 5, 55, 796, 10, 55, 3, 55, 3, 55, 3, 55, 3, 55, 5, 55, 802, 10, 
	55, 7, 55, 804, 10, 55, 12, 55, 14, 55, 807, 11, 55, 3, 55, 3, 55, 3, 55, 
	3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 57, 3, 57, 3, 57, 7, 
	57, 822, 10, 57, 12, 57, 14, 57, 825, 11, 57, 3, 57, 3, 57, 5, 57, 829, 
	10, 57, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 5, 58, 836, 10, 58, 5, 58, 838, 
	10, 58, 3, 59, 3, 59, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 61, 3, 61, 
	3, 61, 3, 61, 3, 61, 3, 62, 3, 62, 3, 62, 3, 63, 3, 63, 3, 63, 7, 63, 858, 
	10, 63, 12, 63, 14, 63, 861, 11, 63, 3, 64, 3, 64, 3, 64, 7, 64, 866, 10, 
	64, 12, 64, 14, 64, 869, 11, 64, 3, 65, 5, 65, 872, 10, 65, 3, 65, 3, 65, 
	3, 66, 3, 66, 3, 66, 3, 66, 5, 66, 880, 10, 66, 3, 67, 3, 67, 3, 68, 5, 
	68, 885, 10, 68, 3, 68, 3, 68, 3, 68, 3, 68, 7, 68, 891, 10, 68, 12, 68, 
	14, 68, 894, 11, 68, 3, 69, 3, 69, 3, 70, 3, 70, 3, 70, 3, 70, 7, 70, 902, 
	10, 70, 12, 70, 14, 70, 905, 11, 70, 3, 71, 3, 71, 3, 72, 3, 72, 3, 72, 
	5, 72, 912, 10, 72, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 5, 
	73, 921, 10, 73, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 
	3, 73, 3, 73, 7, 73, 933, 10, 73, 12, 73, 14, 73, 936, 11, 73, 3, 73, 3, 
	73, 3, 73, 3, 73, 5, 73, 942, 10, 73, 3, 74, 3, 74, 3, 74, 3, 74, 3, 75, 
	5, 75, 949, 10, 75, 3, 75, 3, 75, 3, 75, 7, 75, 954, 10, 75, 12, 75, 14, 
	75, 957, 11, 75, 3, 76, 5, 76, 960, 10, 76, 3, 76, 3, 76, 5, 76, 964, 10, 
	76, 3, 76, 3, 76, 3, 76, 5, 76, 969, 10, 76, 7, 76, 971, 10, 76, 12, 76, 
	14, 76, 974, 11, 76, 3, 77, 3, 77, 5, 77, 978, 10, 77, 3, 77, 3, 77, 3, 
	78, 3, 78, 3, 78, 3, 78, 3, 78, 5, 78, 987, 10, 78, 3, 78, 5, 78, 990, 
	10, 78, 3, 79, 3, 79, 3, 79, 5, 79, 995, 10, 79, 3, 80, 3, 80, 3, 80, 3, 
	80, 3, 81, 3, 81, 3, 81, 3, 81, 5, 81, 1005, 10, 81, 3, 81, 3, 81, 3, 81, 
	5, 81, 1010, 10, 81, 3, 82, 5, 82, 1013, 10, 82, 3, 82, 3, 82, 5, 82, 1017, 
	10, 82, 7, 82, 1019, 10, 82, 12, 82, 14, 82, 1022, 11, 82, 3, 83, 3, 83, 
	3, 83, 7, 83, 1027, 10, 83, 12, 83, 14, 83, 1030, 11, 83, 3, 84, 3, 84, 
	3, 84, 3, 84, 7, 84, 1036, 10, 84, 12, 84, 14, 84, 1039, 11, 84, 3, 84, 
	3, 84, 3, 85, 3, 85, 5, 85, 1045, 10, 85, 3, 86, 3, 86, 5, 86, 1049, 10, 
	86, 3, 87, 3, 87, 3, 87, 7, 87, 1054, 10, 87, 12, 87, 14, 87, 1057, 11, 
	87, 3, 88, 3, 88, 3, 88, 3, 88, 2, 2, 89, 2, 4, 6, 8, 10, 12, 14, 16, 18, 
	20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 
	56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 
	92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 
	122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 
	152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 2, 10, 3, 2, 
	17, 18, 3, 2, 41, 42, 3, 2, 43, 45, 3, 2, 46, 47, 3, 2, 69, 74, 3, 2, 75, 
	78, 4, 2, 37, 37, 79, 81, 3, 2, 82, 83, 2, 1167, 2, 183, 3, 2, 2, 2, 4, 
	198, 3, 2, 2, 2, 6, 206, 3, 2, 2, 2, 8, 209, 3, 2, 2, 2, 10, 254, 3, 2, 
	2, 2, 12, 289, 3, 2, 2, 2, 14, 291, 3, 2, 2, 2, 16, 312, 3, 2, 2, 2, 18, 
	314, 3, 2, 2, 2, 20, 322, 3, 2, 2, 2, 22, 329, 3, 2, 2, 2, 24, 359, 3, 
	2, 2, 2, 26, 361, 3, 2, 2, 2, 28, 366, 3, 2, 2, 2, 30, 380, 3, 2, 2, 2, 
	32, 417, 3, 2, 2, 2, 34, 419, 3, 2, 2, 2, 36, 440, 3, 2, 2, 2, 38, 448, 
	3, 2, 2, 2, 40, 456, 3, 2, 2, 2, 42, 461, 3, 2, 2, 2, 44, 469, 3, 2, 2, 
	2, 46, 477, 3, 2, 2, 2, 48, 479, 3, 2, 2, 2, 50, 487, 3, 2, 2, 2, 52, 497, 
	3, 2, 2, 2, 54, 500, 3, 2, 2, 2, 56, 516, 3, 2, 2, 2, 58, 518, 3, 2, 2, 
	2, 60, 524, 3, 2, 2, 2, 62, 534, 3, 2, 2, 2, 64, 537, 3, 2, 2, 2, 66, 546, 
	3, 2, 2, 2, 68, 553, 3, 2, 2, 2, 70, 567, 3, 2, 2, 2, 72, 575, 3, 2, 2, 
	2, 74, 579, 3, 2, 2, 2, 76, 586, 3, 2, 2, 2, 78, 590, 3, 2, 2, 2, 80, 599, 
	3, 2, 2, 2, 82, 604, 3, 2, 2, 2, 84, 613, 3, 2, 2, 2, 86, 628, 3, 2, 2, 
	2, 88, 655, 3, 2, 2, 2, 90, 663, 3, 2, 2, 2, 92, 689, 3, 2, 2, 2, 94, 729, 
	3, 2, 2, 2, 96, 731, 3, 2, 2, 2, 98, 740, 3, 2, 2, 2, 100, 749, 3, 2, 2, 
	2, 102, 757, 3, 2, 2, 2, 104, 762, 3, 2, 2, 2, 106, 771, 3, 2, 2, 2, 108, 
	791, 3, 2, 2, 2, 110, 811, 3, 2, 2, 2, 112, 828, 3, 2, 2, 2, 114, 830, 
	3, 2, 2, 2, 116, 839, 3, 2, 2, 2, 118, 841, 3, 2, 2, 2, 120, 846, 3, 2, 
	2, 2, 122, 851, 3, 2, 2, 2, 124, 854, 3, 2, 2, 2, 126, 862, 3, 2, 2, 2, 
	128, 871, 3, 2, 2, 2, 130, 875, 3, 2, 2, 2, 132, 881, 3, 2, 2, 2, 134, 
	884, 3, 2, 2, 2, 136, 895, 3, 2, 2, 2, 138, 897, 3, 2, 2, 2, 140, 906, 
	3, 2, 2, 2, 142, 908, 3, 2, 2, 2, 144, 941, 3, 2, 2, 2, 146, 943, 3, 2, 
	2, 2, 148, 948, 3, 2, 2, 2, 150, 959, 3, 2, 2, 2, 152, 975, 3, 2, 2, 2, 
	154, 989, 3, 2, 2, 2, 156, 991, 3, 2, 2, 2, 158, 996, 3, 2, 2, 2, 160, 
	1009, 3, 2, 2, 2, 162, 1012, 3, 2, 2, 2, 164, 1023, 3, 2, 2, 2, 166, 1031, 
	3, 2, 2, 2, 168, 1044, 3, 2, 2, 2, 170, 1046, 3, 2, 2, 2, 172, 1050, 3, 
	2, 2, 2, 174, 1058, 3, 2, 2, 2, 176, 178, 7, 3, 2, 2, 177, 179, 5, 148, 
	75, 2, 178, 177, 3, 2, 2, 2, 178, 179, 3, 2, 2, 2, 179, 180, 3, 2, 2, 2, 
	180, 182, 7, 4, 2, 2, 181, 176, 3, 2, 2, 2, 182, 185, 3, 2, 2, 2, 183, 
	181, 3, 2, 2, 2, 183, 184, 3, 2, 2, 2, 184, 194, 3, 2, 2, 2, 185, 183, 
	3, 2, 2, 2, 186, 188, 7, 5, 2, 2, 187, 186, 3, 2, 2, 2, 187, 188, 3, 2, 
	2, 2, 188, 189, 3, 2, 2, 2, 189, 190, 5, 4, 3, 2, 190, 191, 7, 4, 2, 2, 
	191, 193, 3, 2, 2, 2, 192, 187, 3, 2, 2, 2, 193, 196, 3, 2, 2, 2, 194, 
	192, 3, 2, 2, 2, 194, 195, 3, 2, 2, 2, 195, 3, 3, 2, 2, 2, 196, 194, 3, 
	2, 2, 2, 197, 199, 7, 6, 2, 2, 198, 197, 3, 2, 2, 2, 198, 199, 3, 2, 2, 
	2, 199, 200, 3, 2, 2, 2, 200, 201, 5, 8, 5, 2, 201, 202, 5, 6, 4, 2, 202, 
	5, 3, 2, 2, 2, 203, 207, 5, 10, 6, 2, 204, 207, 5, 12, 7, 2, 205, 207, 
	5, 14, 8, 2, 206, 203, 3, 2, 2, 2, 206, 204, 3, 2, 2, 2, 206, 205, 3, 2, 
	2, 2, 207, 7, 3, 2, 2, 2, 208, 210, 7, 7, 2, 2, 209, 208, 3, 2, 2, 2, 209, 
	210, 3, 2, 2, 2, 210, 232, 3, 2, 2, 2, 211, 233, 7, 8, 2, 2, 212, 233, 
	7, 9, 2, 2, 213, 215, 7, 10, 2, 2, 214, 213, 3, 2, 2, 2, 214, 215, 3, 2, 
	2, 2, 215, 216, 3, 2, 2, 2, 216, 233, 7, 11, 2, 2, 217, 233, 7, 12, 2, 
	2, 218, 220, 7, 13, 2, 2, 219, 218, 3, 2, 2, 2, 219, 220, 3, 2, 2, 2, 220, 
	221, 3, 2, 2, 2, 221, 233, 7, 14, 2, 2, 222, 233, 7, 15, 2, 2, 223, 233, 
	7, 16, 2, 2, 224, 226, 9, 2, 2, 2, 225, 224, 3, 2, 2, 2, 225, 226, 3, 2, 
	2, 2, 226, 228, 3, 2, 2, 2, 227, 229, 7, 10, 2, 2, 228, 227, 3, 2, 2, 2, 
	228, 229, 3, 2, 2, 2, 229, 230, 3, 2, 2, 2, 230, 233, 7, 19, 2, 2, 231, 
	233, 7, 10, 2, 2, 232, 211, 3, 2, 2, 2, 232, 212, 3, 2, 2, 2, 232, 214, 
	3, 2, 2, 2, 232, 217, 3, 2, 2, 2, 232, 219, 3, 2, 2, 2, 232, 222, 3, 2, 
	2, 2, 232, 223, 3, 2, 2, 2, 232, 225, 3, 2, 2, 2, 232, 231, 3, 2, 2, 2, 
	233, 9, 3, 2, 2, 2, 234, 236, 7, 91, 2, 2, 235, 237, 5, 172, 87, 2, 236, 
	235, 3, 2, 2, 2, 236, 237, 3, 2, 2, 2, 237, 238, 3, 2, 2, 2, 238, 239, 
	5, 22, 12, 2, 239, 240, 7, 20, 2, 2, 240, 241, 7, 91, 2, 2, 241, 255, 3, 
	2, 2, 2, 242, 243, 7, 21, 2, 2, 243, 245, 7, 91, 2, 2, 244, 246, 5, 58, 
	30, 2, 245, 244, 3, 2, 2, 2, 245, 246, 3, 2, 2, 2, 246, 248, 3, 2, 2, 2, 
	247, 249, 5, 172, 87, 2, 248, 247, 3, 2, 2, 2, 248, 249, 3, 2, 2, 2, 249, 
	250, 3, 2, 2, 2, 250, 251, 5, 22, 12, 2, 251, 252, 7, 20, 2, 2, 252, 253, 
	7, 91, 2, 2, 253, 255, 3, 2, 2, 2, 254, 234, 3, 2, 2, 2, 254, 242, 3, 2, 
	2, 2, 255, 11, 3, 2, 2, 2, 256, 257, 7, 91, 2, 2, 257, 258, 7, 22, 2, 2, 
	258, 259, 5, 16, 9, 2, 259, 261, 5, 148, 75, 2, 260, 262, 5, 166, 84, 2, 
	261, 260, 3, 2, 2, 2, 261, 262, 3, 2, 2, 2, 262, 264, 3, 2, 2, 2, 263, 
	265, 5, 58, 30, 2, 264, 263, 3, 2, 2, 2, 264, 265, 3, 2, 2, 2, 265, 267, 
	3, 2, 2, 2, 266, 268, 5, 172, 87, 2, 267, 266, 3, 2, 2, 2, 267, 268, 3, 
	2, 2, 2, 268, 270, 3, 2, 2, 2, 269, 271, 5, 174, 88, 2, 270, 269, 3, 2, 
	2, 2, 270, 271, 3, 2, 2, 2, 271, 290, 3, 2, 2, 2, 272, 273, 7, 91, 2, 2, 
	273, 274, 7, 22, 2, 2, 274, 275, 7, 23, 2, 2, 275, 280, 7, 24, 2, 2, 276, 
	278, 5, 18, 10, 2, 277, 276, 3, 2, 2, 2, 277, 278, 3, 2, 2, 2, 278, 281, 
	3, 2, 2, 2, 279, 281, 7, 25, 2, 2, 280, 277, 3, 2, 2, 2, 280, 279, 3, 2, 
	2, 2, 281, 282, 3, 2, 2, 2, 282, 284, 7, 26, 2, 2, 283, 285, 5, 172, 87, 
	2, 284, 283, 3, 2, 2, 2, 284, 285, 3, 2, 2, 2, 285, 287, 3, 2, 2, 2, 286, 
	288, 5, 174, 88, 2, 287, 286, 3, 2, 2, 2, 287, 288, 3, 2, 2, 2, 288, 290, 
	3, 2, 2, 2, 289, 256, 3, 2, 2, 2, 289, 272, 3, 2, 2, 2, 290, 13, 3, 2, 
	2, 2, 291, 292, 7, 91, 2, 2, 292, 293, 7, 22, 2, 2, 293, 294, 7, 27, 2, 
	2, 294, 295, 7, 24, 2, 2, 295, 296, 5, 148, 75, 2, 296, 297, 7, 28, 2, 
	2, 297, 302, 7, 91, 2, 2, 298, 299, 7, 28, 2, 2, 299, 301, 7, 91, 2, 2, 
	300, 298, 3, 2, 2, 2, 301, 304, 3, 2, 2, 2, 302, 300, 3, 2, 2, 2, 302, 
	303, 3, 2, 2, 2, 303, 305, 3, 2, 2, 2, 304, 302, 3, 2, 2, 2, 305, 307, 
	7, 26, 2, 2, 306, 308, 5, 172, 87, 2, 307, 306, 3, 2, 2, 2, 307, 308, 3, 
	2, 2, 2, 308, 310, 3, 2, 2, 2, 309, 311, 5, 174, 88, 2, 310, 309, 3, 2, 
	2, 2, 310, 311, 3, 2, 2, 2, 311, 15, 3, 2, 2, 2, 312, 313, 5, 44, 23, 2, 
	313, 17, 3, 2, 2, 2, 314, 319, 5, 20, 11, 2, 315, 316, 7, 28, 2, 2, 316, 
	318, 5, 20, 11, 2, 317, 315, 3, 2, 2, 2, 318, 321, 3, 2, 2, 2, 319, 317, 
	3, 2, 2, 2, 319, 320, 3, 2, 2, 2, 320, 19, 3, 2, 2, 2, 321, 319, 3, 2, 
	2, 2, 322, 324, 7, 91, 2, 2, 323, 325, 5, 172, 87, 2, 324, 323, 3, 2, 2, 
	2, 324, 325, 3, 2, 2, 2, 325, 327, 3, 2, 2, 2, 326, 328, 5, 174, 88, 2, 
	327, 326, 3, 2, 2, 2, 327, 328, 3, 2, 2, 2, 328, 21, 3, 2, 2, 2, 329, 338, 
	5, 30, 16, 2, 330, 331, 7, 29, 2, 2, 331, 337, 5, 30, 16, 2, 332, 333, 
	7, 30, 2, 2, 333, 337, 5, 30, 16, 2, 334, 337, 5, 78, 40, 2, 335, 337, 
	5, 82, 42, 2, 336, 330, 3, 2, 2, 2, 336, 332, 3, 2, 2, 2, 336, 334, 3, 
	2, 2, 2, 336, 335, 3, 2, 2, 2, 337, 340, 3, 2, 2, 2, 338, 336, 3, 2, 2, 
	2, 338, 339, 3, 2, 2, 2, 339, 352, 3, 2, 2, 2, 340, 338, 3, 2, 2, 2, 341, 
	343, 7, 31, 2, 2, 342, 344, 5, 26, 14, 2, 343, 342, 3, 2, 2, 2, 343, 344, 
	3, 2, 2, 2, 344, 346, 3, 2, 2, 2, 345, 347, 5, 28, 15, 2, 346, 345, 3, 
	2, 2, 2, 346, 347, 3, 2, 2, 2, 347, 349, 3, 2, 2, 2, 348, 350, 5, 174, 
	88, 2, 349, 348, 3, 2, 2, 2, 349, 350, 3, 2, 2, 2, 350, 351, 3, 2, 2, 2, 
	351, 353, 7, 4, 2, 2, 352, 341, 3, 2, 2, 2, 352, 353, 3, 2, 2, 2, 353, 
	357, 3, 2, 2, 2, 354, 355, 5, 24, 13, 2, 355, 356, 7, 4, 2, 2, 356, 358, 
	3, 2, 2, 2, 357, 354, 3, 2, 2, 2, 357, 358, 3, 2, 2, 2, 358, 23, 3, 2, 
	2, 2, 359, 360, 5, 174, 88, 2, 360, 25, 3, 2, 2, 2, 361, 362, 7, 92, 2, 
	2, 362, 27, 3, 2, 2, 2, 363, 364, 5, 150, 76, 2, 364, 365, 7, 22, 2, 2, 
	365, 367, 3, 2, 2, 2, 366, 363, 3, 2, 2, 2, 366, 367, 3, 2, 2, 2, 367, 
	368, 3, 2, 2, 2, 368, 369, 7, 91, 2, 2, 369, 371, 7, 24, 2, 2, 370, 372, 
	5, 164, 83, 2, 371, 370, 3, 2, 2, 2, 371, 372, 3, 2, 2, 2, 372, 373, 3, 
	2, 2, 2, 373, 374, 7, 26, 2, 2, 374, 29, 3, 2, 2, 2, 375, 376, 5, 32, 17, 
	2, 376, 377, 7, 4, 2, 2, 377, 379, 3, 2, 2, 2, 378, 375, 3, 2, 2, 2, 379, 
	382, 3, 2, 2, 2, 380, 378, 3, 2, 2, 2, 380, 381, 3, 2, 2, 2, 381, 31, 3, 
	2, 2, 2, 382, 380, 3, 2, 2, 2, 383, 418, 5, 34, 18, 2, 384, 418, 5, 38, 
	20, 2, 385, 387, 7, 32, 2, 2, 386, 385, 3, 2, 2, 2, 386, 387, 3, 2, 2, 
	2, 387, 389, 3, 2, 2, 2, 388, 390, 7, 5, 2, 2, 389, 388, 3, 2, 2, 2, 389, 
	390, 3, 2, 2, 2, 390, 392, 3, 2, 2, 2, 391, 393, 7, 33, 2, 2, 392, 391, 
	3, 2, 2, 2, 392, 393, 3, 2, 2, 2, 393, 395, 3, 2, 2, 2, 394, 396, 7, 34, 
	2, 2, 395, 394, 3, 2, 2, 2, 395, 396, 3, 2, 2, 2, 396, 415, 3, 2, 2, 2, 
	397, 400, 5, 4, 3, 2, 398, 400, 5, 42, 22, 2, 399, 397, 3, 2, 2, 2, 399, 
	398, 3, 2, 2, 2, 400, 416, 3, 2, 2, 2, 401, 404, 7, 35, 2, 2, 402, 405, 
	5, 4, 3, 2, 403, 405, 5, 42, 22, 2, 404, 402, 3, 2, 2, 2, 404, 403, 3, 
	2, 2, 2, 405, 413, 3, 2, 2, 2, 406, 408, 5, 40, 21, 2, 407, 409, 5, 172, 
	87, 2, 408, 407, 3, 2, 2, 2, 408, 409, 3, 2, 2, 2, 409, 411, 3, 2, 2, 2, 
	410, 412, 5, 174, 88, 2, 411, 410, 3, 2, 2, 2, 411, 412, 3, 2, 2, 2, 412, 
	414, 3, 2, 2, 2, 413, 406, 3, 2, 2, 2, 413, 414, 3, 2, 2, 2, 414, 416, 
	3, 2, 2, 2, 415, 399, 3, 2, 2, 2, 415, 401, 3, 2, 2, 2, 416, 418, 3, 2, 
	2, 2, 417, 383, 3, 2, 2, 2, 417, 384, 3, 2, 2, 2, 417, 386, 3, 2, 2, 2, 
	418, 33, 3, 2, 2, 2, 419, 432, 7, 36, 2, 2, 420, 421, 7, 91, 2, 2, 421, 
	422, 7, 22, 2, 2, 422, 433, 5, 148, 75, 2, 423, 424, 5, 148, 75, 2, 424, 
	425, 7, 37, 2, 2, 425, 433, 3, 2, 2, 2, 426, 427, 5, 148, 75, 2, 427, 428, 
	7, 38, 2, 2, 428, 429, 5, 36, 19, 2, 429, 430, 7, 39, 2, 2, 430, 433, 3, 
	2, 2, 2, 431, 433, 5, 148, 75, 2, 432, 420, 3, 2, 2, 2, 432, 423, 3, 2, 
	2, 2, 432, 426, 3, 2, 2, 2, 432, 431, 3, 2, 2, 2, 433, 435, 3, 2, 2, 2, 
	434, 436, 5, 172, 87, 2, 435, 434, 3, 2, 2, 2, 435, 436, 3, 2, 2, 2, 436, 
	438, 3, 2, 2, 2, 437, 439, 5, 174, 88, 2, 438, 437, 3, 2, 2, 2, 438, 439, 
	3, 2, 2, 2, 439, 35, 3, 2, 2, 2, 440, 445, 7, 91, 2, 2, 441, 442, 7, 28, 
	2, 2, 442, 444, 7, 91, 2, 2, 443, 441, 3, 2, 2, 2, 444, 447, 3, 2, 2, 2, 
	445, 443, 3, 2, 2, 2, 445, 446, 3, 2, 2, 2, 446, 37, 3, 2, 2, 2, 447, 445, 
	3, 2, 2, 2, 448, 449, 7, 21, 2, 2, 449, 451, 5, 148, 75, 2, 450, 452, 5, 
	58, 30, 2, 451, 450, 3, 2, 2, 2, 451, 452, 3, 2, 2, 2, 452, 454, 3, 2, 
	2, 2, 453, 455, 5, 174, 88, 2, 454, 453, 3, 2, 2, 2, 454, 455, 3, 2, 2, 
	2, 455, 39, 3, 2, 2, 2, 456, 457, 7, 40, 2, 2, 457, 459, 5, 148, 75, 2, 
	458, 460, 5, 58, 30, 2, 459, 458, 3, 2, 2, 2, 459, 460, 3, 2, 2, 2, 460, 
	41, 3, 2, 2, 2, 461, 462, 5, 44, 23, 2, 462, 464, 5, 46, 24, 2, 463, 465, 
	5, 166, 84, 2, 464, 463, 3, 2, 2, 2, 464, 465, 3, 2, 2, 2, 465, 466, 3, 
	2, 2, 2, 466, 467, 5, 48, 25, 2, 467, 43, 3, 2, 2, 2, 468, 470, 9, 3, 2, 
	2, 469, 468, 3, 2, 2, 2, 469, 470, 3, 2, 2, 2, 470, 472, 3, 2, 2, 2, 471, 
	473, 9, 4, 2, 2, 472, 471, 3, 2, 2, 2, 472, 473, 3, 2, 2, 2, 473, 475, 
	3, 2, 2, 2, 474, 476, 9, 5, 2, 2, 475, 474, 3, 2, 2, 2, 475, 476, 3, 2, 
	2, 2, 476, 45, 3, 2, 2, 2, 477, 478, 5, 148, 75, 2, 478, 47, 3, 2, 2, 2, 
	479, 484, 5, 50, 26, 2, 480, 481, 7, 28, 2, 2, 481, 483, 5, 50, 26, 2, 
	482, 480, 3, 2, 2, 2, 483, 486, 3, 2, 2, 2, 484, 482, 3, 2, 2, 2, 484, 
	485, 3, 2, 2, 2, 485, 49, 3, 2, 2, 2, 486, 484, 3, 2, 2, 2, 487, 489, 5, 
	54, 28, 2, 488, 490, 5, 52, 27, 2, 489, 488, 3, 2, 2, 2, 489, 490, 3, 2, 
	2, 2, 490, 492, 3, 2, 2, 2, 491, 493, 5, 172, 87, 2, 492, 491, 3, 2, 2, 
	2, 492, 493, 3, 2, 2, 2, 493, 495, 3, 2, 2, 2, 494, 496, 5, 174, 88, 2, 
	495, 494, 3, 2, 2, 2, 495, 496, 3, 2, 2, 2, 496, 51, 3, 2, 2, 2, 497, 498, 
	7, 48, 2, 2, 498, 499, 5, 112, 57, 2, 499, 53, 3, 2, 2, 2, 500, 502, 7, 
	91, 2, 2, 501, 503, 5, 166, 84, 2, 502, 501, 3, 2, 2, 2, 502, 503, 3, 2, 
	2, 2, 503, 505, 3, 2, 2, 2, 504, 506, 5, 56, 29, 2, 505, 504, 3, 2, 2, 
	2, 505, 506, 3, 2, 2, 2, 506, 55, 3, 2, 2, 2, 507, 510, 5, 58, 30, 2, 508, 
	509, 7, 22, 2, 2, 509, 511, 5, 112, 57, 2, 510, 508, 3, 2, 2, 2, 510, 511, 
	3, 2, 2, 2, 511, 517, 3, 2, 2, 2, 512, 513, 7, 22, 2, 2, 513, 517, 5, 112, 
	57, 2, 514, 515, 7, 49, 2, 2, 515, 517, 5, 112, 57, 2, 516, 507, 3, 2, 
	2, 2, 516, 512, 3, 2, 2, 2, 516, 514, 3, 2, 2, 2, 517, 57, 3, 2, 2, 2, 
	518, 520, 7, 24, 2, 2, 519, 521, 5, 60, 31, 2, 520, 519, 3, 2, 2, 2, 520, 
	521, 3, 2, 2, 2, 521, 522, 3, 2, 2, 2, 522, 523, 7, 26, 2, 2, 523, 59, 
	3, 2, 2, 2, 524, 529, 5, 62, 32, 2, 525, 526, 7, 28, 2, 2, 526, 528, 5, 
	62, 32, 2, 527, 525, 3, 2, 2, 2, 528, 531, 3, 2, 2, 2, 529, 527, 3, 2, 
	2, 2, 529, 530, 3, 2, 2, 2, 530, 61, 3, 2, 2, 2, 531, 529, 3, 2, 2, 2, 
	532, 535, 5, 64, 33, 2, 533, 535, 5, 68, 35, 2, 534, 532, 3, 2, 2, 2, 534, 
	533, 3, 2, 2, 2, 535, 63, 3, 2, 2, 2, 536, 538, 7, 50, 2, 2, 537, 536, 
	3, 2, 2, 2, 537, 538, 3, 2, 2, 2, 538, 540, 3, 2, 2, 2, 539, 541, 7, 5, 
	2, 2, 540, 539, 3, 2, 2, 2, 540, 541, 3, 2, 2, 2, 541, 544, 3, 2, 2, 2, 
	542, 545, 5, 66, 34, 2, 543, 545, 5, 70, 36, 2, 544, 542, 3, 2, 2, 2, 544, 
	543, 3, 2, 2, 2, 545, 65, 3, 2, 2, 2, 546, 548, 5, 148, 75, 2, 547, 549, 
	5, 56, 29, 2, 548, 547, 3, 2, 2, 2, 548, 549, 3, 2, 2, 2, 549, 551, 3, 
	2, 2, 2, 550, 552, 5, 172, 87, 2, 551, 550, 3, 2, 2, 2, 551, 552, 3, 2, 
	2, 2, 552, 67, 3, 2, 2, 2, 553, 555, 7, 32, 2, 2, 554, 556, 7, 50, 2, 2, 
	555, 554, 3, 2, 2, 2, 555, 556, 3, 2, 2, 2, 556, 558, 3, 2, 2, 2, 557, 
	559, 7, 5, 2, 2, 558, 557, 3, 2, 2, 2, 558, 559, 3, 2, 2, 2, 559, 565, 
	3, 2, 2, 2, 560, 563, 5, 76, 39, 2, 561, 563, 5, 72, 37, 2, 562, 560, 3, 
	2, 2, 2, 562, 561, 3, 2, 2, 2, 563, 566, 3, 2, 2, 2, 564, 566, 5, 70, 36, 
	2, 565, 562, 3, 2, 2, 2, 565, 564, 3, 2, 2, 2, 566, 69, 3, 2, 2, 2, 567, 
	570, 7, 35, 2, 2, 568, 571, 5, 76, 39, 2, 569, 571, 5, 72, 37, 2, 570, 
	568, 3, 2, 2, 2, 570, 569, 3, 2, 2, 2, 571, 573, 3, 2, 2, 2, 572, 574, 
	5, 40, 21, 2, 573, 572, 3, 2, 2, 2, 573, 574, 3, 2, 2, 2, 574, 71, 3, 2, 
	2, 2, 575, 576, 5, 44, 23, 2, 576, 577, 5, 46, 24, 2, 577, 578, 5, 74, 
	38, 2, 578, 73, 3, 2, 2, 2, 579, 581, 5, 54, 28, 2, 580, 582, 5, 172, 87, 
	2, 581, 580, 3, 2, 2, 2, 581, 582, 3, 2, 2, 2, 582, 584, 3, 2, 2, 2, 583, 
	585, 5, 174, 88, 2, 584, 583, 3, 2, 2, 2, 584, 585, 3, 2, 2, 2, 585, 75, 
	3, 2, 2, 2, 586, 587, 5, 8, 5, 2, 587, 588, 5, 12, 7, 2, 588, 77, 3, 2, 
	2, 2, 589, 591, 7, 51, 2, 2, 590, 589, 3, 2, 2, 2, 590, 591, 3, 2, 2, 2, 
	591, 592, 3, 2, 2, 2, 592, 594, 7, 52, 2, 2, 593, 595, 5, 80, 41, 2, 594, 
	593, 3, 2, 2, 2, 594, 595, 3, 2, 2, 2, 595, 79, 3, 2, 2, 2, 596, 597, 5, 
	86, 44, 2, 597, 598, 7, 4, 2, 2, 598, 600, 3, 2, 2, 2, 599, 596, 3, 2, 
	2, 2, 600, 601, 3, 2, 2, 2, 601, 599, 3, 2, 2, 2, 601, 602, 3, 2, 2, 2, 
	602, 81, 3, 2, 2, 2, 603, 605, 7, 51, 2, 2, 604, 603, 3, 2, 2, 2, 604, 
	605, 3, 2, 2, 2, 605, 606, 3, 2, 2, 2, 606, 608, 7, 53, 2, 2, 607, 609, 
	5, 84, 43, 2, 608, 607, 3, 2, 2, 2, 608, 609, 3, 2, 2, 2, 609, 83, 3, 2, 
	2, 2, 610, 611, 5, 88, 45, 2, 611, 612, 7, 4, 2, 2, 612, 614, 3, 2, 2, 
	2, 613, 610, 3, 2, 2, 2, 614, 615, 3, 2, 2, 2, 615, 613, 3, 2, 2, 2, 615, 
	616, 3, 2, 2, 2, 616, 85, 3, 2, 2, 2, 617, 618, 5, 114, 58, 2, 618, 619, 
	7, 22, 2, 2, 619, 620, 5, 112, 57, 2, 620, 629, 3, 2, 2, 2, 621, 629, 5, 
	90, 46, 2, 622, 629, 5, 96, 49, 2, 623, 629, 5, 110, 56, 2, 624, 629, 5, 
	106, 54, 2, 625, 626, 5, 148, 75, 2, 626, 627, 5, 152, 77, 2, 627, 629, 
	3, 2, 2, 2, 628, 617, 3, 2, 2, 2, 628, 621, 3, 2, 2, 2, 628, 622, 3, 2, 
	2, 2, 628, 623, 3, 2, 2, 2, 628, 624, 3, 2, 2, 2, 628, 625, 3, 2, 2, 2, 
	629, 631, 3, 2, 2, 2, 630, 632, 5, 172, 87, 2, 631, 630, 3, 2, 2, 2, 631, 
	632, 3, 2, 2, 2, 632, 634, 3, 2, 2, 2, 633, 635, 5, 174, 88, 2, 634, 633, 
	3, 2, 2, 2, 634, 635, 3, 2, 2, 2, 635, 87, 3, 2, 2, 2, 636, 640, 5, 150, 
	76, 2, 637, 638, 7, 49, 2, 2, 638, 641, 5, 112, 57, 2, 639, 641, 5, 152, 
	77, 2, 640, 637, 3, 2, 2, 2, 640, 639, 3, 2, 2, 2, 641, 656, 3, 2, 2, 2, 
	642, 643, 7, 24, 2, 2, 643, 644, 5, 162, 82, 2, 644, 645, 7, 26, 2, 2, 
	645, 646, 7, 49, 2, 2, 646, 647, 5, 150, 76, 2, 647, 648, 5, 152, 77, 2, 
	648, 656, 3, 2, 2, 2, 649, 656, 7, 54, 2, 2, 650, 656, 7, 55, 2, 2, 651, 
	656, 5, 92, 47, 2, 652, 656, 5, 98, 50, 2, 653, 656, 5, 104, 53, 2, 654, 
	656, 5, 108, 55, 2, 655, 636, 3, 2, 2, 2, 655, 642, 3, 2, 2, 2, 655, 649, 
	3, 2, 2, 2, 655, 650, 3, 2, 2, 2, 655, 651, 3, 2, 2, 2, 655, 652, 3, 2, 
	2, 2, 655, 653, 3, 2, 2, 2, 655, 654, 3, 2, 2, 2, 656, 658, 3, 2, 2, 2, 
	657, 659, 5, 172, 87, 2, 658, 657, 3, 2, 2, 2, 658, 659, 3, 2, 2, 2, 659, 
	661, 3, 2, 2, 2, 660, 662, 5, 174, 88, 2, 661, 660, 3, 2, 2, 2, 661, 662, 
	3, 2, 2, 2, 662, 89, 3, 2, 2, 2, 663, 664, 7, 48, 2, 2, 664, 665, 5, 112, 
	57, 2, 665, 667, 7, 56, 2, 2, 666, 668, 5, 94, 48, 2, 667, 666, 3, 2, 2, 
	2, 667, 668, 3, 2, 2, 2, 668, 677, 3, 2, 2, 2, 669, 670, 7, 57, 2, 2, 670, 
	671, 5, 112, 57, 2, 671, 673, 7, 56, 2, 2, 672, 674, 5, 94, 48, 2, 673, 
	672, 3, 2, 2, 2, 673, 674, 3, 2, 2, 2, 674, 676, 3, 2, 2, 2, 675, 669, 
	3, 2, 2, 2, 676, 679, 3, 2, 2, 2, 677, 675, 3, 2, 2, 2, 677, 678, 3, 2, 
	2, 2, 678, 684, 3, 2, 2, 2, 679, 677, 3, 2, 2, 2, 680, 682, 7, 58, 2, 2, 
	681, 683, 5, 94, 48, 2, 682, 681, 3, 2, 2, 2, 682, 683, 3, 2, 2, 2, 683, 
	685, 3, 2, 2, 2, 684, 680, 3, 2, 2, 2, 684, 685, 3, 2, 2, 2, 685, 686, 
	3, 2, 2, 2, 686, 687, 7, 20, 2, 2, 687, 688, 7, 48, 2, 2, 688, 91, 3, 2, 
	2, 2, 689, 690, 7, 48, 2, 2, 690, 691, 5, 112, 57, 2, 691, 693, 7, 56, 
	2, 2, 692, 694, 5, 94, 48, 2, 693, 692, 3, 2, 2, 2, 693, 694, 3, 2, 2, 
	2, 694, 703, 3, 2, 2, 2, 695, 696, 7, 57, 2, 2, 696, 697, 5, 112, 57, 2, 
	697, 699, 7, 56, 2, 2, 698, 700, 5, 94, 48, 2, 699, 698, 3, 2, 2, 2, 699, 
	700, 3, 2, 2, 2, 700, 702, 3, 2, 2, 2, 701, 695, 3, 2, 2, 2, 702, 705, 
	3, 2, 2, 2, 703, 701, 3, 2, 2, 2, 703, 704, 3, 2, 2, 2, 704, 710, 3, 2, 
	2, 2, 705, 703, 3, 2, 2, 2, 706, 708, 7, 58, 2, 2, 707, 709, 5, 94, 48, 
	2, 708, 707, 3, 2, 2, 2, 708, 709, 3, 2, 2, 2, 709, 711, 3, 2, 2, 2, 710, 
	706, 3, 2, 2, 2, 710, 711, 3, 2, 2, 2, 711, 712, 3, 2, 2, 2, 712, 713, 
	7, 20, 2, 2, 713, 714, 7, 48, 2, 2, 714, 93, 3, 2, 2, 2, 715, 716, 5, 88, 
	45, 2, 716, 717, 7, 4, 2, 2, 717, 719, 3, 2, 2, 2, 718, 715, 3, 2, 2, 2, 
	719, 720, 3, 2, 2, 2, 720, 718, 3, 2, 2, 2, 720, 721, 3, 2, 2, 2, 721, 
	730, 3, 2, 2, 2, 722, 723, 5, 86, 44, 2, 723, 724, 7, 4, 2, 2, 724, 726, 
	3, 2, 2, 2, 725, 722, 3, 2, 2, 2, 726, 727, 3, 2, 2, 2, 727, 725, 3, 2, 
	2, 2, 727, 728, 3, 2, 2, 2, 728, 730, 3, 2, 2, 2, 729, 718, 3, 2, 2, 2, 
	729, 725, 3, 2, 2, 2, 730, 95, 3, 2, 2, 2, 731, 732, 7, 59, 2, 2, 732, 
	733, 5, 100, 51, 2, 733, 735, 7, 60, 2, 2, 734, 736, 5, 94, 48, 2, 735, 
	734, 3, 2, 2, 2, 735, 736, 3, 2, 2, 2, 736, 737, 3, 2, 2, 2, 737, 738, 
	7, 20, 2, 2, 738, 739, 7, 59, 2, 2, 739, 97, 3, 2, 2, 2, 740, 741, 7, 59, 
	2, 2, 741, 742, 5, 100, 51, 2, 742, 744, 7, 60, 2, 2, 743, 745, 5, 94, 
	48, 2, 744, 743, 3, 2, 2, 2, 744, 745, 3, 2, 2, 2, 745, 746, 3, 2, 2, 2, 
	746, 747, 7, 20, 2, 2, 747, 748, 7, 59, 2, 2, 748, 99, 3, 2, 2, 2, 749, 
	754, 5, 102, 52, 2, 750, 751, 7, 28, 2, 2, 751, 753, 5, 102, 52, 2, 752, 
	750, 3, 2, 2, 2, 753, 756, 3, 2, 2, 2, 754, 752, 3, 2, 2, 2, 754, 755, 
	3, 2, 2, 2, 755, 101, 3, 2, 2, 2, 756, 754, 3, 2, 2, 2, 757, 760, 7, 91, 
	2, 2, 758, 759, 7, 61, 2, 2, 759, 761, 5, 112, 57, 2, 760, 758, 3, 2, 2, 
	2, 760, 761, 3, 2, 2, 2, 761, 103, 3, 2, 2, 2, 762, 763, 7, 62, 2, 2, 763, 
	764, 5, 112, 57, 2, 764, 766, 7, 60, 2, 2, 765, 767, 5, 94, 48, 2, 766, 
	765, 3, 2, 2, 2, 766, 767, 3, 2, 2, 2, 767, 768, 3, 2, 2, 2, 768, 769, 
	7, 20, 2, 2, 769, 770, 7, 62, 2, 2, 770, 105, 3, 2, 2, 2, 771, 772, 7, 
	63, 2, 2, 772, 773, 5, 112, 57, 2, 773, 775, 7, 56, 2, 2, 774, 776, 5, 
	94, 48, 2, 775, 774, 3, 2, 2, 2, 775, 776, 3, 2, 2, 2, 776, 785, 3, 2, 
	2, 2, 777, 778, 7, 64, 2, 2, 778, 779, 5, 112, 57, 2, 779, 781, 7, 56, 
	2, 2, 780, 782, 5, 94, 48, 2, 781, 780, 3, 2, 2, 2, 781, 782, 3, 2, 2, 
	2, 782, 784, 3, 2, 2, 2, 783, 777, 3, 2, 2, 2, 784, 787, 3, 2, 2, 2, 785, 
	783, 3, 2, 2, 2, 785, 786, 3, 2, 2, 2, 786, 788, 3, 2, 2, 2, 787, 785, 
	3, 2, 2, 2, 788, 789, 7, 20, 2, 2, 789, 790, 7, 63, 2, 2, 790, 107, 3, 
	2, 2, 2, 791, 792, 7, 63, 2, 2, 792, 793, 5, 112, 57, 2, 793, 795, 7, 56, 
	2, 2, 794, 796, 5, 94, 48, 2, 795, 794, 3, 2, 2, 2, 795, 796, 3, 2, 2, 
	2, 796, 805, 3, 2, 2, 2, 797, 798, 7, 64, 2, 2, 798, 799, 5, 112, 57, 2, 
	799, 801, 7, 56, 2, 2, 800, 802, 5, 94, 48, 2, 801, 800, 3, 2, 2, 2, 801, 
	802, 3, 2, 2, 2, 802, 804, 3, 2, 2, 2, 803, 797, 3, 2, 2, 2, 804, 807, 
	3, 2, 2, 2, 805, 803, 3, 2, 2, 2, 805, 806, 3, 2, 2, 2, 806, 808, 3, 2, 
	2, 2, 807, 805, 3, 2, 2, 2, 808, 809, 7, 20, 2, 2, 809, 810, 7, 63, 2, 
	2, 810, 109, 3, 2, 2, 2, 811, 812, 7, 65, 2, 2, 812, 813, 7, 24, 2, 2, 
	813, 814, 5, 150, 76, 2, 814, 815, 7, 28, 2, 2, 815, 816, 5, 150, 76, 2, 
	816, 817, 7, 26, 2, 2, 817, 111, 3, 2, 2, 2, 818, 829, 5, 114, 58, 2, 819, 
	823, 5, 118, 60, 2, 820, 822, 5, 120, 61, 2, 821, 820, 3, 2, 2, 2, 822, 
	825, 3, 2, 2, 2, 823, 821, 3, 2, 2, 2, 823, 824, 3, 2, 2, 2, 824, 826, 
	3, 2, 2, 2, 825, 823, 3, 2, 2, 2, 826, 827, 5, 122, 62, 2, 827, 829, 3, 
	2, 2, 2, 828, 818, 3, 2, 2, 2, 828, 819, 3, 2, 2, 2, 829, 113, 3, 2, 2, 
	2, 830, 837, 5, 124, 63, 2, 831, 832, 7, 25, 2, 2, 832, 835, 5, 124, 63, 
	2, 833, 834, 7, 25, 2, 2, 834, 836, 5, 124, 63, 2, 835, 833, 3, 2, 2, 2, 
	835, 836, 3, 2, 2, 2, 836, 838, 3, 2, 2, 2, 837, 831, 3, 2, 2, 2, 837, 
	838, 3, 2, 2, 2, 838, 115, 3, 2, 2, 2, 839, 840, 5, 112, 57, 2, 840, 117, 
	3, 2, 2, 2, 841, 842, 7, 48, 2, 2, 842, 843, 5, 112, 57, 2, 843, 844, 7, 
	56, 2, 2, 844, 845, 5, 116, 59, 2, 845, 119, 3, 2, 2, 2, 846, 847, 7, 57, 
	2, 2, 847, 848, 5, 112, 57, 2, 848, 849, 7, 56, 2, 2, 849, 850, 5, 116, 
	59, 2, 850, 121, 3, 2, 2, 2, 851, 852, 7, 58, 2, 2, 852, 853, 5, 116, 59, 
	2, 853, 123, 3, 2, 2, 2, 854, 859, 5, 126, 64, 2, 855, 856, 7, 66, 2, 2, 
	856, 858, 5, 126, 64, 2, 857, 855, 3, 2, 2, 2, 858, 861, 3, 2, 2, 2, 859, 
	857, 3, 2, 2, 2, 859, 860, 3, 2, 2, 2, 860, 125, 3, 2, 2, 2, 861, 859, 
	3, 2, 2, 2, 862, 867, 5, 128, 65, 2, 863, 864, 7, 67, 2, 2, 864, 866, 5, 
	128, 65, 2, 865, 863, 3, 2, 2, 2, 866, 869, 3, 2, 2, 2, 867, 865, 3, 2, 
	2, 2, 867, 868, 3, 2, 2, 2, 868, 127, 3, 2, 2, 2, 869, 867, 3, 2, 2, 2, 
	870, 872, 7, 68, 2, 2, 871, 870, 3, 2, 2, 2, 871, 872, 3, 2, 2, 2, 872, 
	873, 3, 2, 2, 2, 873, 874, 5, 130, 66, 2, 874, 129, 3, 2, 2, 2, 875, 879, 
	5, 134, 68, 2, 876, 877, 5, 132, 67, 2, 877, 878, 5, 134, 68, 2, 878, 880, 
	3, 2, 2, 2, 879, 876, 3, 2, 2, 2, 879, 880, 3, 2, 2, 2, 880, 131, 3, 2, 
	2, 2, 881, 882, 9, 6, 2, 2, 882, 133, 3, 2, 2, 2, 883, 885, 5, 136, 69, 
	2, 884, 883, 3, 2, 2, 2, 884, 885, 3, 2, 2, 2, 885, 886, 3, 2, 2, 2, 886, 
	892, 5, 138, 70, 2, 887, 888, 5, 136, 69, 2, 888, 889, 5, 138, 70, 2, 889, 
	891, 3, 2, 2, 2, 890, 887, 3, 2, 2, 2, 891, 894, 3, 2, 2, 2, 892, 890, 
	3, 2, 2, 2, 892, 893, 3, 2, 2, 2, 893, 135, 3, 2, 2, 2, 894, 892, 3, 2, 
	2, 2, 895, 896, 9, 7, 2, 2, 896, 137, 3, 2, 2, 2, 897, 903, 5, 142, 72, 
	2, 898, 899, 5, 140, 71, 2, 899, 900, 5, 142, 72, 2, 900, 902, 3, 2, 2, 
	2, 901, 898, 3, 2, 2, 2, 902, 905, 3, 2, 2, 2, 903, 901, 3, 2, 2, 2, 903, 
	904, 3, 2, 2, 2, 904, 139, 3, 2, 2, 2, 905, 903, 3, 2, 2, 2, 906, 907, 
	9, 8, 2, 2, 907, 141, 3, 2, 2, 2, 908, 911, 5, 144, 73, 2, 909, 910, 9, 
	9, 2, 2, 910, 912, 5, 144, 73, 2, 911, 909, 3, 2, 2, 2, 911, 912, 3, 2, 
	2, 2, 912, 143, 3, 2, 2, 2, 913, 942, 7, 93, 2, 2, 914, 942, 7, 92, 2, 
	2, 915, 942, 7, 84, 2, 2, 916, 942, 7, 85, 2, 2, 917, 921, 5, 148, 75, 
	2, 918, 921, 7, 27, 2, 2, 919, 921, 7, 51, 2, 2, 920, 917, 3, 2, 2, 2, 
	920, 918, 3, 2, 2, 2, 920, 919, 3, 2, 2, 2, 921, 922, 3, 2, 2, 2, 922, 
	942, 5, 152, 77, 2, 923, 942, 5, 150, 76, 2, 924, 925, 7, 24, 2, 2, 925, 
	926, 5, 162, 82, 2, 926, 927, 7, 26, 2, 2, 927, 942, 3, 2, 2, 2, 928, 929, 
	7, 86, 2, 2, 929, 934, 5, 164, 83, 2, 930, 931, 7, 4, 2, 2, 931, 933, 5, 
	164, 83, 2, 932, 930, 3, 2, 2, 2, 933, 936, 3, 2, 2, 2, 934, 932, 3, 2, 
	2, 2, 934, 935, 3, 2, 2, 2, 935, 937, 3, 2, 2, 2, 936, 934, 3, 2, 2, 2, 
	937, 938, 7, 87, 2, 2, 938, 942, 3, 2, 2, 2, 939, 942, 5, 146, 74, 2, 940, 
	942, 7, 20, 2, 2, 941, 913, 3, 2, 2, 2, 941, 914, 3, 2, 2, 2, 941, 915, 
	3, 2, 2, 2, 941, 916, 3, 2, 2, 2, 941, 920, 3, 2, 2, 2, 941, 923, 3, 2, 
	2, 2, 941, 924, 3, 2, 2, 2, 941, 928, 3, 2, 2, 2, 941, 939, 3, 2, 2, 2, 
	941, 940, 3, 2, 2, 2, 942, 145, 3, 2, 2, 2, 943, 944, 7, 88, 2, 2, 944, 
	945, 5, 154, 78, 2, 945, 946, 7, 39, 2, 2, 946, 147, 3, 2, 2, 2, 947, 949, 
	7, 89, 2, 2, 948, 947, 3, 2, 2, 2, 948, 949, 3, 2, 2, 2, 949, 950, 3, 2, 
	2, 2, 950, 955, 7, 91, 2, 2, 951, 952, 7, 89, 2, 2, 952, 954, 7, 91, 2, 
	2, 953, 951, 3, 2, 2, 2, 954, 957, 3, 2, 2, 2, 955, 953, 3, 2, 2, 2, 955, 
	956, 3, 2, 2, 2, 956, 149, 3, 2, 2, 2, 957, 955, 3, 2, 2, 2, 958, 960, 
	7, 89, 2, 2, 959, 958, 3, 2, 2, 2, 959, 960, 3, 2, 2, 2, 960, 961, 3, 2, 
	2, 2, 961, 963, 7, 91, 2, 2, 962, 964, 5, 166, 84, 2, 963, 962, 3, 2, 2, 
	2, 963, 964, 3, 2, 2, 2, 964, 972, 3, 2, 2, 2, 965, 966, 7, 89, 2, 2, 966, 
	968, 7, 91, 2, 2, 967, 969, 5, 166, 84, 2, 968, 967, 3, 2, 2, 2, 968, 969, 
	3, 2, 2, 2, 969, 971, 3, 2, 2, 2, 970, 965, 3, 2, 2, 2, 971, 974, 3, 2, 
	2, 2, 972, 970, 3, 2, 2, 2, 972, 973, 3, 2, 2, 2, 973, 151, 3, 2, 2, 2, 
	974, 972, 3, 2, 2, 2, 975, 977, 7, 24, 2, 2, 976, 978, 5, 154, 78, 2, 977, 
	976, 3, 2, 2, 2, 977, 978, 3, 2, 2, 2, 978, 979, 3, 2, 2, 2, 979, 980, 
	7, 26, 2, 2, 980, 153, 3, 2, 2, 2, 981, 986, 5, 160, 81, 2, 982, 983, 7, 
	28, 2, 2, 983, 987, 5, 154, 78, 2, 984, 985, 7, 59, 2, 2, 985, 987, 5, 
	100, 51, 2, 986, 982, 3, 2, 2, 2, 986, 984, 3, 2, 2, 2, 986, 987, 3, 2, 
	2, 2, 987, 990, 3, 2, 2, 2, 988, 990, 5, 156, 79, 2, 989, 981, 3, 2, 2, 
	2, 989, 988, 3, 2, 2, 2, 990, 155, 3, 2, 2, 2, 991, 994, 5, 158, 80, 2, 
	992, 993, 7, 28, 2, 2, 993, 995, 5, 156, 79, 2, 994, 992, 3, 2, 2, 2, 994, 
	995, 3, 2, 2, 2, 995, 157, 3, 2, 2, 2, 996, 997, 7, 91, 2, 2, 997, 998, 
	7, 22, 2, 2, 998, 999, 5, 160, 81, 2, 999, 159, 3, 2, 2, 2, 1000, 1001, 
	7, 19, 2, 2, 1001, 1002, 5, 148, 75, 2, 1002, 1004, 7, 24, 2, 2, 1003, 
	1005, 5, 156, 79, 2, 1004, 1003, 3, 2, 2, 2, 1004, 1005, 3, 2, 2, 2, 1005, 
	1006, 3, 2, 2, 2, 1006, 1007, 7, 26, 2, 2, 1007, 1010, 3, 2, 2, 2, 1008, 
	1010, 5, 112, 57, 2, 1009, 1000, 3, 2, 2, 2, 1009, 1008, 3, 2, 2, 2, 1010, 
	161, 3, 2, 2, 2, 1011, 1013, 5, 112, 57, 2, 1012, 1011, 3, 2, 2, 2, 1012, 
	1013, 3, 2, 2, 2, 1013, 1020, 3, 2, 2, 2, 1014, 1016, 7, 28, 2, 2, 1015, 
	1017, 5, 112, 57, 2, 1016, 1015, 3, 2, 2, 2, 1016, 1017, 3, 2, 2, 2, 1017, 
	1019, 3, 2, 2, 2, 1018, 1014, 3, 2, 2, 2, 1019, 1022, 3, 2, 2, 2, 1020, 
	1018, 3, 2, 2, 2, 1020, 1021, 3, 2, 2, 2, 1021, 163, 3, 2, 2, 2, 1022, 
	1020, 3, 2, 2, 2, 1023, 1028, 5, 112, 57, 2, 1024, 1025, 7, 28, 2, 2, 1025, 
	1027, 5, 112, 57, 2, 1026, 1024, 3, 2, 2, 2, 1027, 1030, 3, 2, 2, 2, 1028, 
	1026, 3, 2, 2, 2, 1028, 1029, 3, 2, 2, 2, 1029, 165, 3, 2, 2, 2, 1030, 
	1028, 3, 2, 2, 2, 1031, 1032, 7, 86, 2, 2, 1032, 1037, 5, 168, 85, 2, 1033, 
	1034, 7, 28, 2, 2, 1034, 1036, 5, 168, 85, 2, 1035, 1033, 3, 2, 2, 2, 1036, 
	1039, 3, 2, 2, 2, 1037, 1035, 3, 2, 2, 2, 1037, 1038, 3, 2, 2, 2, 1038, 
	1040, 3, 2, 2, 2, 1039, 1037, 3, 2, 2, 2, 1040, 1041, 7, 87, 2, 2, 1041, 
	167, 3, 2, 2, 2, 1042, 1045, 7, 25, 2, 2, 1043, 1045, 5, 112, 57, 2, 1044, 
	1042, 3, 2, 2, 2, 1044, 1043, 3, 2, 2, 2, 1045, 169, 3, 2, 2, 2, 1046, 
	1048, 5, 172, 87, 2, 1047, 1049, 5, 174, 88, 2, 1048, 1047, 3, 2, 2, 2, 
	1048, 1049, 3, 2, 2, 2, 1049, 171, 3, 2, 2, 2, 1050, 1055, 7, 92, 2, 2, 
	1051, 1052, 7, 75, 2, 2, 1052, 1054, 7, 92, 2, 2, 1053, 1051, 3, 2, 2, 
	2, 1054, 1057, 3, 2, 2, 2, 1055, 1053, 3, 2, 2, 2, 1055, 1056, 3, 2, 2, 
	2, 1056, 173, 3, 2, 2, 2, 1057, 1055, 3, 2, 2, 2, 1058, 1059, 7, 90, 2, 
	2, 1059, 1060, 5, 58, 30, 2, 1060, 175, 3, 2, 2, 2, 161, 178, 183, 187, 
	194, 198, 206, 209, 214, 219, 225, 228, 232, 236, 245, 248, 254, 261, 264, 
	267, 270, 277, 280, 284, 287, 289, 302, 307, 310, 319, 324, 327, 336, 338, 
	343, 346, 349, 352, 357, 366, 371, 380, 386, 389, 392, 395, 399, 404, 408, 
	411, 413, 415, 417, 432, 435, 438, 445, 451, 454, 459, 464, 469, 472, 475, 
	484, 489, 492, 495, 502, 505, 510, 516, 520, 529, 534, 537, 540, 544, 548, 
	551, 555, 558, 562, 565, 570, 573, 581, 584, 590, 594, 601, 604, 608, 615, 
	628, 631, 634, 640, 655, 658, 661, 667, 673, 677, 682, 684, 693, 699, 703, 
	708, 710, 720, 727, 729, 735, 744, 754, 760, 766, 775, 781, 785, 795, 801, 
	805, 823, 828, 835, 837, 859, 867, 871, 879, 884, 892, 903, 911, 920, 934, 
	941, 948, 955, 959, 963, 968, 972, 977, 986, 989, 994, 1004, 1009, 1012, 
	1016, 1020, 1028, 1037, 1044, 1048, 1055,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'within'", "';'", "'final'", "'encapsulated'", "'partial'", "'class'", 
	"'model'", "'operator'", "'record'", "'block'", "'expandable'", "'connector'", 
	"'type'", "'package'", "'pure'", "'impure'", "'function'", "'end'", "'extends'", 
	"'='", "'enumeration'", "'('", "':'", "')'", "'der'", "','", "'public'", 
	"'protected'", "'external'", "'redeclare'", "'inner'", "'outer'", "'replaceable'", 
	"'import'", "'.*'", "'.{'", "'}'", "'constrainedby'", "'flow'", "'stream'", 
	"'discrete'", "'parameter'", "'constant'", "'input'", "'output'", "'if'", 
	"':='", "'each'", "'initial'", "'equation'", "'algorithm'", "'break'", 
	"'return'", "'then'", "'elseif'", "'else'", "'for'", "'loop'", "'in'", 
	"'while'", "'when'", "'elsewhen'", "'connect'", "'or'", "'and'", "'not'", 
	"'<'", "'<='", "'>'", "'>='", "'=='", "'<>'", "'+'", "'-'", "'.+'", "'.-'", 
	"'*'", "'/'", "'./'", "'^'", "'.^'", "'false'", "'true'", "'['", "']'", 
	"'{'", "'.'", "'annotation'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "IDENT", 
	"STRING", "UNSIGNED_NUMBER", "WS", "COMMENT", "LINE_COMMENT",
}

var ruleNames = []string{
	"stored_definition", "class_definition", "class_specifier", "class_prefixes", 
	"long_class_specifier", "short_class_specifier", "der_class_specifier", 
	"base_prefix", "enum_list", "enumeration_literal", "composition", "model_annotation", 
	"language_specification", "external_function_call", "element_list", "element", 
	"import_clause", "import_list", "extends_clause", "constraining_clause", 
	"component_clause", "type_prefix", "type_specifier", "component_list", 
	"component_declaration", "condition_attribute", "declaration", "modification", 
	"class_modification", "argument_list", "argument", "element_modification_or_replaceable", 
	"element_modification", "element_redeclaration", "element_replaceable", 
	"component_clause1", "component_declaration1", "short_class_definition", 
	"equation_section", "equations", "algorithm_section", "algorithm_statements", 
	"equation", "statement", "if_equation", "if_statement", "control_structure_body", 
	"for_equation", "for_statement", "for_indices", "for_index", "while_statement", 
	"when_equation", "when_statement", "connect_clause", "expression", "simple_expression", 
	"if_expression_body", "if_expression_condition", "elseif_expression_condition", 
	"else_expression_condition", "logical_expression", "logical_term", "logical_factor", 
	"relation", "rel_op", "arithmetic_expression", "add_op", "term", "mul_op", 
	"factor", "primary", "vector", "name", "component_reference", "function_call_args", 
	"function_arguments", "named_arguments", "named_argument", "function_argument", 
	"output_expression_list", "expression_list", "array_subscripts", "subscript", 
	"comment", "string_comment", "annotation",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type ModelicaParser struct {
	*antlr.BaseParser
}

func NewModelicaParser(input antlr.TokenStream) *ModelicaParser {
	this := new(ModelicaParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "Modelica.g4"

	return this
}

// ModelicaParser tokens.
const (
	ModelicaParserEOF = antlr.TokenEOF
	ModelicaParserT__0 = 1
	ModelicaParserT__1 = 2
	ModelicaParserT__2 = 3
	ModelicaParserT__3 = 4
	ModelicaParserT__4 = 5
	ModelicaParserT__5 = 6
	ModelicaParserT__6 = 7
	ModelicaParserT__7 = 8
	ModelicaParserT__8 = 9
	ModelicaParserT__9 = 10
	ModelicaParserT__10 = 11
	ModelicaParserT__11 = 12
	ModelicaParserT__12 = 13
	ModelicaParserT__13 = 14
	ModelicaParserT__14 = 15
	ModelicaParserT__15 = 16
	ModelicaParserT__16 = 17
	ModelicaParserT__17 = 18
	ModelicaParserT__18 = 19
	ModelicaParserT__19 = 20
	ModelicaParserT__20 = 21
	ModelicaParserT__21 = 22
	ModelicaParserT__22 = 23
	ModelicaParserT__23 = 24
	ModelicaParserT__24 = 25
	ModelicaParserT__25 = 26
	ModelicaParserT__26 = 27
	ModelicaParserT__27 = 28
	ModelicaParserT__28 = 29
	ModelicaParserT__29 = 30
	ModelicaParserT__30 = 31
	ModelicaParserT__31 = 32
	ModelicaParserT__32 = 33
	ModelicaParserT__33 = 34
	ModelicaParserT__34 = 35
	ModelicaParserT__35 = 36
	ModelicaParserT__36 = 37
	ModelicaParserT__37 = 38
	ModelicaParserT__38 = 39
	ModelicaParserT__39 = 40
	ModelicaParserT__40 = 41
	ModelicaParserT__41 = 42
	ModelicaParserT__42 = 43
	ModelicaParserT__43 = 44
	ModelicaParserT__44 = 45
	ModelicaParserT__45 = 46
	ModelicaParserT__46 = 47
	ModelicaParserT__47 = 48
	ModelicaParserT__48 = 49
	ModelicaParserT__49 = 50
	ModelicaParserT__50 = 51
	ModelicaParserT__51 = 52
	ModelicaParserT__52 = 53
	ModelicaParserT__53 = 54
	ModelicaParserT__54 = 55
	ModelicaParserT__55 = 56
	ModelicaParserT__56 = 57
	ModelicaParserT__57 = 58
	ModelicaParserT__58 = 59
	ModelicaParserT__59 = 60
	ModelicaParserT__60 = 61
	ModelicaParserT__61 = 62
	ModelicaParserT__62 = 63
	ModelicaParserT__63 = 64
	ModelicaParserT__64 = 65
	ModelicaParserT__65 = 66
	ModelicaParserT__66 = 67
	ModelicaParserT__67 = 68
	ModelicaParserT__68 = 69
	ModelicaParserT__69 = 70
	ModelicaParserT__70 = 71
	ModelicaParserT__71 = 72
	ModelicaParserT__72 = 73
	ModelicaParserT__73 = 74
	ModelicaParserT__74 = 75
	ModelicaParserT__75 = 76
	ModelicaParserT__76 = 77
	ModelicaParserT__77 = 78
	ModelicaParserT__78 = 79
	ModelicaParserT__79 = 80
	ModelicaParserT__80 = 81
	ModelicaParserT__81 = 82
	ModelicaParserT__82 = 83
	ModelicaParserT__83 = 84
	ModelicaParserT__84 = 85
	ModelicaParserT__85 = 86
	ModelicaParserT__86 = 87
	ModelicaParserT__87 = 88
	ModelicaParserIDENT = 89
	ModelicaParserSTRING = 90
	ModelicaParserUNSIGNED_NUMBER = 91
	ModelicaParserWS = 92
	ModelicaParserCOMMENT = 93
	ModelicaParserLINE_COMMENT = 94
)

// ModelicaParser rules.
const (
	ModelicaParserRULE_stored_definition = 0
	ModelicaParserRULE_class_definition = 1
	ModelicaParserRULE_class_specifier = 2
	ModelicaParserRULE_class_prefixes = 3
	ModelicaParserRULE_long_class_specifier = 4
	ModelicaParserRULE_short_class_specifier = 5
	ModelicaParserRULE_der_class_specifier = 6
	ModelicaParserRULE_base_prefix = 7
	ModelicaParserRULE_enum_list = 8
	ModelicaParserRULE_enumeration_literal = 9
	ModelicaParserRULE_composition = 10
	ModelicaParserRULE_model_annotation = 11
	ModelicaParserRULE_language_specification = 12
	ModelicaParserRULE_external_function_call = 13
	ModelicaParserRULE_element_list = 14
	ModelicaParserRULE_element = 15
	ModelicaParserRULE_import_clause = 16
	ModelicaParserRULE_import_list = 17
	ModelicaParserRULE_extends_clause = 18
	ModelicaParserRULE_constraining_clause = 19
	ModelicaParserRULE_component_clause = 20
	ModelicaParserRULE_type_prefix = 21
	ModelicaParserRULE_type_specifier = 22
	ModelicaParserRULE_component_list = 23
	ModelicaParserRULE_component_declaration = 24
	ModelicaParserRULE_condition_attribute = 25
	ModelicaParserRULE_declaration = 26
	ModelicaParserRULE_modification = 27
	ModelicaParserRULE_class_modification = 28
	ModelicaParserRULE_argument_list = 29
	ModelicaParserRULE_argument = 30
	ModelicaParserRULE_element_modification_or_replaceable = 31
	ModelicaParserRULE_element_modification = 32
	ModelicaParserRULE_element_redeclaration = 33
	ModelicaParserRULE_element_replaceable = 34
	ModelicaParserRULE_component_clause1 = 35
	ModelicaParserRULE_component_declaration1 = 36
	ModelicaParserRULE_short_class_definition = 37
	ModelicaParserRULE_equation_section = 38
	ModelicaParserRULE_equations = 39
	ModelicaParserRULE_algorithm_section = 40
	ModelicaParserRULE_algorithm_statements = 41
	ModelicaParserRULE_equation = 42
	ModelicaParserRULE_statement = 43
	ModelicaParserRULE_if_equation = 44
	ModelicaParserRULE_if_statement = 45
	ModelicaParserRULE_control_structure_body = 46
	ModelicaParserRULE_for_equation = 47
	ModelicaParserRULE_for_statement = 48
	ModelicaParserRULE_for_indices = 49
	ModelicaParserRULE_for_index = 50
	ModelicaParserRULE_while_statement = 51
	ModelicaParserRULE_when_equation = 52
	ModelicaParserRULE_when_statement = 53
	ModelicaParserRULE_connect_clause = 54
	ModelicaParserRULE_expression = 55
	ModelicaParserRULE_simple_expression = 56
	ModelicaParserRULE_if_expression_body = 57
	ModelicaParserRULE_if_expression_condition = 58
	ModelicaParserRULE_elseif_expression_condition = 59
	ModelicaParserRULE_else_expression_condition = 60
	ModelicaParserRULE_logical_expression = 61
	ModelicaParserRULE_logical_term = 62
	ModelicaParserRULE_logical_factor = 63
	ModelicaParserRULE_relation = 64
	ModelicaParserRULE_rel_op = 65
	ModelicaParserRULE_arithmetic_expression = 66
	ModelicaParserRULE_add_op = 67
	ModelicaParserRULE_term = 68
	ModelicaParserRULE_mul_op = 69
	ModelicaParserRULE_factor = 70
	ModelicaParserRULE_primary = 71
	ModelicaParserRULE_vector = 72
	ModelicaParserRULE_name = 73
	ModelicaParserRULE_component_reference = 74
	ModelicaParserRULE_function_call_args = 75
	ModelicaParserRULE_function_arguments = 76
	ModelicaParserRULE_named_arguments = 77
	ModelicaParserRULE_named_argument = 78
	ModelicaParserRULE_function_argument = 79
	ModelicaParserRULE_output_expression_list = 80
	ModelicaParserRULE_expression_list = 81
	ModelicaParserRULE_array_subscripts = 82
	ModelicaParserRULE_subscript = 83
	ModelicaParserRULE_comment = 84
	ModelicaParserRULE_string_comment = 85
	ModelicaParserRULE_annotation = 86
)

// IStored_definitionContext is an interface to support dynamic dispatch.
type IStored_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStored_definitionContext differentiates from other interfaces.
	IsStored_definitionContext()
}

type Stored_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStored_definitionContext() *Stored_definitionContext {
	var p = new(Stored_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_stored_definition
	return p
}

func (*Stored_definitionContext) IsStored_definitionContext() {}

func NewStored_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Stored_definitionContext {
	var p = new(Stored_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_stored_definition

	return p
}

func (s *Stored_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Stored_definitionContext) AllClass_definition() []IClass_definitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IClass_definitionContext)(nil)).Elem())
	var tst = make([]IClass_definitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IClass_definitionContext)
		}
	}

	return tst
}

func (s *Stored_definitionContext) Class_definition(i int) IClass_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_definitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IClass_definitionContext)
}

func (s *Stored_definitionContext) AllName() []INameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameContext)(nil)).Elem())
	var tst = make([]INameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameContext)
		}
	}

	return tst
}

func (s *Stored_definitionContext) Name(i int) INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Stored_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stored_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Stored_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterStored_definition(s)
	}
}

func (s *Stored_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitStored_definition(s)
	}
}




func (p *ModelicaParser) Stored_definition() (localctx IStored_definitionContext) {
	localctx = NewStored_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, ModelicaParserRULE_stored_definition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(181)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ModelicaParserT__0 {
		{
			p.SetState(174)
			p.Match(ModelicaParserT__0)
		}
		p.SetState(176)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserT__86 || _la == ModelicaParserIDENT {
			{
				p.SetState(175)
				p.Name()
			}

		}
		{
			p.SetState(178)
			p.Match(ModelicaParserT__1)
		}


		p.SetState(183)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(192)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ModelicaParserT__2) | (1 << ModelicaParserT__3) | (1 << ModelicaParserT__4) | (1 << ModelicaParserT__5) | (1 << ModelicaParserT__6) | (1 << ModelicaParserT__7) | (1 << ModelicaParserT__8) | (1 << ModelicaParserT__9) | (1 << ModelicaParserT__10) | (1 << ModelicaParserT__11) | (1 << ModelicaParserT__12) | (1 << ModelicaParserT__13) | (1 << ModelicaParserT__14) | (1 << ModelicaParserT__15) | (1 << ModelicaParserT__16))) != 0) {
		p.SetState(185)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserT__2 {
			{
				p.SetState(184)
				p.Match(ModelicaParserT__2)
			}

		}
		{
			p.SetState(187)
			p.Class_definition()
		}
		{
			p.SetState(188)
			p.Match(ModelicaParserT__1)
		}


		p.SetState(194)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IClass_definitionContext is an interface to support dynamic dispatch.
type IClass_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClass_definitionContext differentiates from other interfaces.
	IsClass_definitionContext()
}

type Class_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClass_definitionContext() *Class_definitionContext {
	var p = new(Class_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_class_definition
	return p
}

func (*Class_definitionContext) IsClass_definitionContext() {}

func NewClass_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Class_definitionContext {
	var p = new(Class_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_class_definition

	return p
}

func (s *Class_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Class_definitionContext) Class_prefixes() IClass_prefixesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_prefixesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_prefixesContext)
}

func (s *Class_definitionContext) Class_specifier() IClass_specifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_specifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_specifierContext)
}

func (s *Class_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Class_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterClass_definition(s)
	}
}

func (s *Class_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitClass_definition(s)
	}
}




func (p *ModelicaParser) Class_definition() (localctx IClass_definitionContext) {
	localctx = NewClass_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, ModelicaParserRULE_class_definition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(196)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__3 {
		{
			p.SetState(195)
			p.Match(ModelicaParserT__3)
		}

	}
	{
		p.SetState(198)
		p.Class_prefixes()
	}
	{
		p.SetState(199)
		p.Class_specifier()
	}



	return localctx
}


// IClass_specifierContext is an interface to support dynamic dispatch.
type IClass_specifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClass_specifierContext differentiates from other interfaces.
	IsClass_specifierContext()
}

type Class_specifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClass_specifierContext() *Class_specifierContext {
	var p = new(Class_specifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_class_specifier
	return p
}

func (*Class_specifierContext) IsClass_specifierContext() {}

func NewClass_specifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Class_specifierContext {
	var p = new(Class_specifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_class_specifier

	return p
}

func (s *Class_specifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Class_specifierContext) Long_class_specifier() ILong_class_specifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILong_class_specifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILong_class_specifierContext)
}

func (s *Class_specifierContext) Short_class_specifier() IShort_class_specifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShort_class_specifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShort_class_specifierContext)
}

func (s *Class_specifierContext) Der_class_specifier() IDer_class_specifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDer_class_specifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDer_class_specifierContext)
}

func (s *Class_specifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_specifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Class_specifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterClass_specifier(s)
	}
}

func (s *Class_specifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitClass_specifier(s)
	}
}




func (p *ModelicaParser) Class_specifier() (localctx IClass_specifierContext) {
	localctx = NewClass_specifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, ModelicaParserRULE_class_specifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(204)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(201)
			p.Long_class_specifier()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(202)
			p.Short_class_specifier()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(203)
			p.Der_class_specifier()
		}

	}


	return localctx
}


// IClass_prefixesContext is an interface to support dynamic dispatch.
type IClass_prefixesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClass_prefixesContext differentiates from other interfaces.
	IsClass_prefixesContext()
}

type Class_prefixesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClass_prefixesContext() *Class_prefixesContext {
	var p = new(Class_prefixesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_class_prefixes
	return p
}

func (*Class_prefixesContext) IsClass_prefixesContext() {}

func NewClass_prefixesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Class_prefixesContext {
	var p = new(Class_prefixesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_class_prefixes

	return p
}

func (s *Class_prefixesContext) GetParser() antlr.Parser { return s.parser }
func (s *Class_prefixesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_prefixesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Class_prefixesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterClass_prefixes(s)
	}
}

func (s *Class_prefixesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitClass_prefixes(s)
	}
}




func (p *ModelicaParser) Class_prefixes() (localctx IClass_prefixesContext) {
	localctx = NewClass_prefixesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, ModelicaParserRULE_class_prefixes)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(207)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__4 {
		{
			p.SetState(206)
			p.Match(ModelicaParserT__4)
		}

	}
	p.SetState(230)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(209)
			p.Match(ModelicaParserT__5)
		}


	case 2:
		{
			p.SetState(210)
			p.Match(ModelicaParserT__6)
		}


	case 3:
		p.SetState(212)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserT__7 {
			{
				p.SetState(211)
				p.Match(ModelicaParserT__7)
			}

		}
		{
			p.SetState(214)
			p.Match(ModelicaParserT__8)
		}


	case 4:
		{
			p.SetState(215)
			p.Match(ModelicaParserT__9)
		}


	case 5:
		p.SetState(217)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserT__10 {
			{
				p.SetState(216)
				p.Match(ModelicaParserT__10)
			}

		}
		{
			p.SetState(219)
			p.Match(ModelicaParserT__11)
		}


	case 6:
		{
			p.SetState(220)
			p.Match(ModelicaParserT__12)
		}


	case 7:
		{
			p.SetState(221)
			p.Match(ModelicaParserT__13)
		}


	case 8:
		p.SetState(223)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserT__14 || _la == ModelicaParserT__15 {
			{
				p.SetState(222)
				_la = p.GetTokenStream().LA(1)

				if !(_la == ModelicaParserT__14 || _la == ModelicaParserT__15) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(226)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserT__7 {
			{
				p.SetState(225)
				p.Match(ModelicaParserT__7)
			}

		}
		{
			p.SetState(228)
			p.Match(ModelicaParserT__16)
		}


	case 9:
		{
			p.SetState(229)
			p.Match(ModelicaParserT__7)
		}

	}



	return localctx
}


// ILong_class_specifierContext is an interface to support dynamic dispatch.
type ILong_class_specifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLong_class_specifierContext differentiates from other interfaces.
	IsLong_class_specifierContext()
}

type Long_class_specifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLong_class_specifierContext() *Long_class_specifierContext {
	var p = new(Long_class_specifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_long_class_specifier
	return p
}

func (*Long_class_specifierContext) IsLong_class_specifierContext() {}

func NewLong_class_specifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Long_class_specifierContext {
	var p = new(Long_class_specifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_long_class_specifier

	return p
}

func (s *Long_class_specifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Long_class_specifierContext) AllIDENT() []antlr.TerminalNode {
	return s.GetTokens(ModelicaParserIDENT)
}

func (s *Long_class_specifierContext) IDENT(i int) antlr.TerminalNode {
	return s.GetToken(ModelicaParserIDENT, i)
}

func (s *Long_class_specifierContext) Composition() ICompositionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompositionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompositionContext)
}

func (s *Long_class_specifierContext) String_comment() IString_commentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_commentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_commentContext)
}

func (s *Long_class_specifierContext) Class_modification() IClass_modificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_modificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_modificationContext)
}

func (s *Long_class_specifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Long_class_specifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Long_class_specifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterLong_class_specifier(s)
	}
}

func (s *Long_class_specifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitLong_class_specifier(s)
	}
}




func (p *ModelicaParser) Long_class_specifier() (localctx ILong_class_specifierContext) {
	localctx = NewLong_class_specifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, ModelicaParserRULE_long_class_specifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(252)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ModelicaParserIDENT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(232)
			p.Match(ModelicaParserIDENT)
		}
		p.SetState(234)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserSTRING {
			{
				p.SetState(233)
				p.String_comment()
			}

		}
		{
			p.SetState(236)
			p.Composition()
		}
		{
			p.SetState(237)
			p.Match(ModelicaParserT__17)
		}
		{
			p.SetState(238)
			p.Match(ModelicaParserIDENT)
		}


	case ModelicaParserT__18:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(240)
			p.Match(ModelicaParserT__18)
		}
		{
			p.SetState(241)
			p.Match(ModelicaParserIDENT)
		}
		p.SetState(243)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserT__21 {
			{
				p.SetState(242)
				p.Class_modification()
			}

		}
		p.SetState(246)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserSTRING {
			{
				p.SetState(245)
				p.String_comment()
			}

		}
		{
			p.SetState(248)
			p.Composition()
		}
		{
			p.SetState(249)
			p.Match(ModelicaParserT__17)
		}
		{
			p.SetState(250)
			p.Match(ModelicaParserIDENT)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IShort_class_specifierContext is an interface to support dynamic dispatch.
type IShort_class_specifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShort_class_specifierContext differentiates from other interfaces.
	IsShort_class_specifierContext()
}

type Short_class_specifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShort_class_specifierContext() *Short_class_specifierContext {
	var p = new(Short_class_specifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_short_class_specifier
	return p
}

func (*Short_class_specifierContext) IsShort_class_specifierContext() {}

func NewShort_class_specifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Short_class_specifierContext {
	var p = new(Short_class_specifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_short_class_specifier

	return p
}

func (s *Short_class_specifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Short_class_specifierContext) IDENT() antlr.TerminalNode {
	return s.GetToken(ModelicaParserIDENT, 0)
}

func (s *Short_class_specifierContext) Base_prefix() IBase_prefixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBase_prefixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBase_prefixContext)
}

func (s *Short_class_specifierContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Short_class_specifierContext) Array_subscripts() IArray_subscriptsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_subscriptsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_subscriptsContext)
}

func (s *Short_class_specifierContext) Class_modification() IClass_modificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_modificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_modificationContext)
}

func (s *Short_class_specifierContext) String_comment() IString_commentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_commentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_commentContext)
}

func (s *Short_class_specifierContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *Short_class_specifierContext) Enum_list() IEnum_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnum_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnum_listContext)
}

func (s *Short_class_specifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Short_class_specifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Short_class_specifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterShort_class_specifier(s)
	}
}

func (s *Short_class_specifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitShort_class_specifier(s)
	}
}




func (p *ModelicaParser) Short_class_specifier() (localctx IShort_class_specifierContext) {
	localctx = NewShort_class_specifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, ModelicaParserRULE_short_class_specifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(287)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(254)
			p.Match(ModelicaParserIDENT)
		}
		{
			p.SetState(255)
			p.Match(ModelicaParserT__19)
		}
		{
			p.SetState(256)
			p.Base_prefix()
		}
		{
			p.SetState(257)
			p.Name()
		}
		p.SetState(259)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserT__83 {
			{
				p.SetState(258)
				p.Array_subscripts()
			}

		}
		p.SetState(262)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserT__21 {
			{
				p.SetState(261)
				p.Class_modification()
			}

		}
		p.SetState(265)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserSTRING {
			{
				p.SetState(264)
				p.String_comment()
			}

		}
		p.SetState(268)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserT__87 {
			{
				p.SetState(267)
				p.Annotation()
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(270)
			p.Match(ModelicaParserIDENT)
		}
		{
			p.SetState(271)
			p.Match(ModelicaParserT__19)
		}
		{
			p.SetState(272)
			p.Match(ModelicaParserT__20)
		}
		{
			p.SetState(273)
			p.Match(ModelicaParserT__21)
		}
		p.SetState(278)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case ModelicaParserT__23, ModelicaParserIDENT:
			p.SetState(275)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == ModelicaParserIDENT {
				{
					p.SetState(274)
					p.Enum_list()
				}

			}


		case ModelicaParserT__22:
			{
				p.SetState(277)
				p.Match(ModelicaParserT__22)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(280)
			p.Match(ModelicaParserT__23)
		}
		p.SetState(282)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserSTRING {
			{
				p.SetState(281)
				p.String_comment()
			}

		}
		p.SetState(285)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserT__87 {
			{
				p.SetState(284)
				p.Annotation()
			}

		}

	}


	return localctx
}


// IDer_class_specifierContext is an interface to support dynamic dispatch.
type IDer_class_specifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDer_class_specifierContext differentiates from other interfaces.
	IsDer_class_specifierContext()
}

type Der_class_specifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDer_class_specifierContext() *Der_class_specifierContext {
	var p = new(Der_class_specifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_der_class_specifier
	return p
}

func (*Der_class_specifierContext) IsDer_class_specifierContext() {}

func NewDer_class_specifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Der_class_specifierContext {
	var p = new(Der_class_specifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_der_class_specifier

	return p
}

func (s *Der_class_specifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Der_class_specifierContext) AllIDENT() []antlr.TerminalNode {
	return s.GetTokens(ModelicaParserIDENT)
}

func (s *Der_class_specifierContext) IDENT(i int) antlr.TerminalNode {
	return s.GetToken(ModelicaParserIDENT, i)
}

func (s *Der_class_specifierContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Der_class_specifierContext) String_comment() IString_commentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_commentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_commentContext)
}

func (s *Der_class_specifierContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *Der_class_specifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Der_class_specifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Der_class_specifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterDer_class_specifier(s)
	}
}

func (s *Der_class_specifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitDer_class_specifier(s)
	}
}




func (p *ModelicaParser) Der_class_specifier() (localctx IDer_class_specifierContext) {
	localctx = NewDer_class_specifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, ModelicaParserRULE_der_class_specifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(289)
		p.Match(ModelicaParserIDENT)
	}
	{
		p.SetState(290)
		p.Match(ModelicaParserT__19)
	}
	{
		p.SetState(291)
		p.Match(ModelicaParserT__24)
	}
	{
		p.SetState(292)
		p.Match(ModelicaParserT__21)
	}
	{
		p.SetState(293)
		p.Name()
	}
	{
		p.SetState(294)
		p.Match(ModelicaParserT__25)
	}
	{
		p.SetState(295)
		p.Match(ModelicaParserIDENT)
	}
	p.SetState(300)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ModelicaParserT__25 {
		{
			p.SetState(296)
			p.Match(ModelicaParserT__25)
		}
		{
			p.SetState(297)
			p.Match(ModelicaParserIDENT)
		}


		p.SetState(302)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(303)
		p.Match(ModelicaParserT__23)
	}
	p.SetState(305)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserSTRING {
		{
			p.SetState(304)
			p.String_comment()
		}

	}
	p.SetState(308)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__87 {
		{
			p.SetState(307)
			p.Annotation()
		}

	}



	return localctx
}


// IBase_prefixContext is an interface to support dynamic dispatch.
type IBase_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBase_prefixContext differentiates from other interfaces.
	IsBase_prefixContext()
}

type Base_prefixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBase_prefixContext() *Base_prefixContext {
	var p = new(Base_prefixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_base_prefix
	return p
}

func (*Base_prefixContext) IsBase_prefixContext() {}

func NewBase_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Base_prefixContext {
	var p = new(Base_prefixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_base_prefix

	return p
}

func (s *Base_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Base_prefixContext) Type_prefix() IType_prefixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_prefixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_prefixContext)
}

func (s *Base_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Base_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Base_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterBase_prefix(s)
	}
}

func (s *Base_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitBase_prefix(s)
	}
}




func (p *ModelicaParser) Base_prefix() (localctx IBase_prefixContext) {
	localctx = NewBase_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, ModelicaParserRULE_base_prefix)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(310)
		p.Type_prefix()
	}



	return localctx
}


// IEnum_listContext is an interface to support dynamic dispatch.
type IEnum_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnum_listContext differentiates from other interfaces.
	IsEnum_listContext()
}

type Enum_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnum_listContext() *Enum_listContext {
	var p = new(Enum_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_enum_list
	return p
}

func (*Enum_listContext) IsEnum_listContext() {}

func NewEnum_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Enum_listContext {
	var p = new(Enum_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_enum_list

	return p
}

func (s *Enum_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Enum_listContext) AllEnumeration_literal() []IEnumeration_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEnumeration_literalContext)(nil)).Elem())
	var tst = make([]IEnumeration_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEnumeration_literalContext)
		}
	}

	return tst
}

func (s *Enum_listContext) Enumeration_literal(i int) IEnumeration_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumeration_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEnumeration_literalContext)
}

func (s *Enum_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Enum_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Enum_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterEnum_list(s)
	}
}

func (s *Enum_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitEnum_list(s)
	}
}




func (p *ModelicaParser) Enum_list() (localctx IEnum_listContext) {
	localctx = NewEnum_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, ModelicaParserRULE_enum_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(312)
		p.Enumeration_literal()
	}
	p.SetState(317)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ModelicaParserT__25 {
		{
			p.SetState(313)
			p.Match(ModelicaParserT__25)
		}
		{
			p.SetState(314)
			p.Enumeration_literal()
		}


		p.SetState(319)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IEnumeration_literalContext is an interface to support dynamic dispatch.
type IEnumeration_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumeration_literalContext differentiates from other interfaces.
	IsEnumeration_literalContext()
}

type Enumeration_literalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumeration_literalContext() *Enumeration_literalContext {
	var p = new(Enumeration_literalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_enumeration_literal
	return p
}

func (*Enumeration_literalContext) IsEnumeration_literalContext() {}

func NewEnumeration_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Enumeration_literalContext {
	var p = new(Enumeration_literalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_enumeration_literal

	return p
}

func (s *Enumeration_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Enumeration_literalContext) IDENT() antlr.TerminalNode {
	return s.GetToken(ModelicaParserIDENT, 0)
}

func (s *Enumeration_literalContext) String_comment() IString_commentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_commentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_commentContext)
}

func (s *Enumeration_literalContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *Enumeration_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Enumeration_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Enumeration_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterEnumeration_literal(s)
	}
}

func (s *Enumeration_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitEnumeration_literal(s)
	}
}




func (p *ModelicaParser) Enumeration_literal() (localctx IEnumeration_literalContext) {
	localctx = NewEnumeration_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, ModelicaParserRULE_enumeration_literal)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(320)
		p.Match(ModelicaParserIDENT)
	}
	p.SetState(322)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserSTRING {
		{
			p.SetState(321)
			p.String_comment()
		}

	}
	p.SetState(325)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__87 {
		{
			p.SetState(324)
			p.Annotation()
		}

	}



	return localctx
}


// ICompositionContext is an interface to support dynamic dispatch.
type ICompositionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompositionContext differentiates from other interfaces.
	IsCompositionContext()
}

type CompositionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompositionContext() *CompositionContext {
	var p = new(CompositionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_composition
	return p
}

func (*CompositionContext) IsCompositionContext() {}

func NewCompositionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompositionContext {
	var p = new(CompositionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_composition

	return p
}

func (s *CompositionContext) GetParser() antlr.Parser { return s.parser }

func (s *CompositionContext) AllElement_list() []IElement_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IElement_listContext)(nil)).Elem())
	var tst = make([]IElement_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IElement_listContext)
		}
	}

	return tst
}

func (s *CompositionContext) Element_list(i int) IElement_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElement_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IElement_listContext)
}

func (s *CompositionContext) AllEquation_section() []IEquation_sectionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEquation_sectionContext)(nil)).Elem())
	var tst = make([]IEquation_sectionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEquation_sectionContext)
		}
	}

	return tst
}

func (s *CompositionContext) Equation_section(i int) IEquation_sectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEquation_sectionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEquation_sectionContext)
}

func (s *CompositionContext) AllAlgorithm_section() []IAlgorithm_sectionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAlgorithm_sectionContext)(nil)).Elem())
	var tst = make([]IAlgorithm_sectionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAlgorithm_sectionContext)
		}
	}

	return tst
}

func (s *CompositionContext) Algorithm_section(i int) IAlgorithm_sectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlgorithm_sectionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAlgorithm_sectionContext)
}

func (s *CompositionContext) Model_annotation() IModel_annotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModel_annotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModel_annotationContext)
}

func (s *CompositionContext) Language_specification() ILanguage_specificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILanguage_specificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILanguage_specificationContext)
}

func (s *CompositionContext) External_function_call() IExternal_function_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExternal_function_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExternal_function_callContext)
}

func (s *CompositionContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *CompositionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompositionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *CompositionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterComposition(s)
	}
}

func (s *CompositionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitComposition(s)
	}
}




func (p *ModelicaParser) Composition() (localctx ICompositionContext) {
	localctx = NewCompositionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, ModelicaParserRULE_composition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(327)
		p.Element_list()
	}
	p.SetState(336)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for ((((_la - 27)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 27))) & ((1 << (ModelicaParserT__26 - 27)) | (1 << (ModelicaParserT__27 - 27)) | (1 << (ModelicaParserT__48 - 27)) | (1 << (ModelicaParserT__49 - 27)) | (1 << (ModelicaParserT__50 - 27)))) != 0) {
		p.SetState(334)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 31, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(328)
				p.Match(ModelicaParserT__26)
			}
			{
				p.SetState(329)
				p.Element_list()
			}


		case 2:
			{
				p.SetState(330)
				p.Match(ModelicaParserT__27)
			}
			{
				p.SetState(331)
				p.Element_list()
			}


		case 3:
			{
				p.SetState(332)
				p.Equation_section()
			}


		case 4:
			{
				p.SetState(333)
				p.Algorithm_section()
			}

		}

		p.SetState(338)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(350)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__28 {
		{
			p.SetState(339)
			p.Match(ModelicaParserT__28)
		}
		p.SetState(341)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserSTRING {
			{
				p.SetState(340)
				p.Language_specification()
			}

		}
		p.SetState(344)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserT__86 || _la == ModelicaParserIDENT {
			{
				p.SetState(343)
				p.External_function_call()
			}

		}
		p.SetState(347)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserT__87 {
			{
				p.SetState(346)
				p.Annotation()
			}

		}
		{
			p.SetState(349)
			p.Match(ModelicaParserT__1)
		}

	}
	p.SetState(355)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__87 {
		{
			p.SetState(352)
			p.Model_annotation()
		}
		{
			p.SetState(353)
			p.Match(ModelicaParserT__1)
		}

	}



	return localctx
}


// IModel_annotationContext is an interface to support dynamic dispatch.
type IModel_annotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModel_annotationContext differentiates from other interfaces.
	IsModel_annotationContext()
}

type Model_annotationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModel_annotationContext() *Model_annotationContext {
	var p = new(Model_annotationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_model_annotation
	return p
}

func (*Model_annotationContext) IsModel_annotationContext() {}

func NewModel_annotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Model_annotationContext {
	var p = new(Model_annotationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_model_annotation

	return p
}

func (s *Model_annotationContext) GetParser() antlr.Parser { return s.parser }

func (s *Model_annotationContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *Model_annotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Model_annotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Model_annotationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterModel_annotation(s)
	}
}

func (s *Model_annotationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitModel_annotation(s)
	}
}




func (p *ModelicaParser) Model_annotation() (localctx IModel_annotationContext) {
	localctx = NewModel_annotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, ModelicaParserRULE_model_annotation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(357)
		p.Annotation()
	}



	return localctx
}


// ILanguage_specificationContext is an interface to support dynamic dispatch.
type ILanguage_specificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLanguage_specificationContext differentiates from other interfaces.
	IsLanguage_specificationContext()
}

type Language_specificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLanguage_specificationContext() *Language_specificationContext {
	var p = new(Language_specificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_language_specification
	return p
}

func (*Language_specificationContext) IsLanguage_specificationContext() {}

func NewLanguage_specificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Language_specificationContext {
	var p = new(Language_specificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_language_specification

	return p
}

func (s *Language_specificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Language_specificationContext) STRING() antlr.TerminalNode {
	return s.GetToken(ModelicaParserSTRING, 0)
}

func (s *Language_specificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Language_specificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Language_specificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterLanguage_specification(s)
	}
}

func (s *Language_specificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitLanguage_specification(s)
	}
}




func (p *ModelicaParser) Language_specification() (localctx ILanguage_specificationContext) {
	localctx = NewLanguage_specificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, ModelicaParserRULE_language_specification)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(359)
		p.Match(ModelicaParserSTRING)
	}



	return localctx
}


// IExternal_function_callContext is an interface to support dynamic dispatch.
type IExternal_function_callContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExternal_function_callContext differentiates from other interfaces.
	IsExternal_function_callContext()
}

type External_function_callContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExternal_function_callContext() *External_function_callContext {
	var p = new(External_function_callContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_external_function_call
	return p
}

func (*External_function_callContext) IsExternal_function_callContext() {}

func NewExternal_function_callContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *External_function_callContext {
	var p = new(External_function_callContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_external_function_call

	return p
}

func (s *External_function_callContext) GetParser() antlr.Parser { return s.parser }

func (s *External_function_callContext) IDENT() antlr.TerminalNode {
	return s.GetToken(ModelicaParserIDENT, 0)
}

func (s *External_function_callContext) Component_reference() IComponent_referenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComponent_referenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComponent_referenceContext)
}

func (s *External_function_callContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *External_function_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *External_function_callContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *External_function_callContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterExternal_function_call(s)
	}
}

func (s *External_function_callContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitExternal_function_call(s)
	}
}




func (p *ModelicaParser) External_function_call() (localctx IExternal_function_callContext) {
	localctx = NewExternal_function_callContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, ModelicaParserRULE_external_function_call)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(364)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(361)
			p.Component_reference()
		}
		{
			p.SetState(362)
			p.Match(ModelicaParserT__19)
		}


	}
	{
		p.SetState(366)
		p.Match(ModelicaParserIDENT)
	}
	{
		p.SetState(367)
		p.Match(ModelicaParserT__21)
	}
	p.SetState(369)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if ((((_la - 18)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 18))) & ((1 << (ModelicaParserT__17 - 18)) | (1 << (ModelicaParserT__21 - 18)) | (1 << (ModelicaParserT__24 - 18)) | (1 << (ModelicaParserT__45 - 18)) | (1 << (ModelicaParserT__48 - 18)))) != 0) || ((((_la - 66)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 66))) & ((1 << (ModelicaParserT__65 - 66)) | (1 << (ModelicaParserT__72 - 66)) | (1 << (ModelicaParserT__73 - 66)) | (1 << (ModelicaParserT__74 - 66)) | (1 << (ModelicaParserT__75 - 66)) | (1 << (ModelicaParserT__81 - 66)) | (1 << (ModelicaParserT__82 - 66)) | (1 << (ModelicaParserT__83 - 66)) | (1 << (ModelicaParserT__85 - 66)) | (1 << (ModelicaParserT__86 - 66)) | (1 << (ModelicaParserIDENT - 66)) | (1 << (ModelicaParserSTRING - 66)) | (1 << (ModelicaParserUNSIGNED_NUMBER - 66)))) != 0) {
		{
			p.SetState(368)
			p.Expression_list()
		}

	}
	{
		p.SetState(371)
		p.Match(ModelicaParserT__23)
	}



	return localctx
}


// IElement_listContext is an interface to support dynamic dispatch.
type IElement_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElement_listContext differentiates from other interfaces.
	IsElement_listContext()
}

type Element_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElement_listContext() *Element_listContext {
	var p = new(Element_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_element_list
	return p
}

func (*Element_listContext) IsElement_listContext() {}

func NewElement_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Element_listContext {
	var p = new(Element_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_element_list

	return p
}

func (s *Element_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Element_listContext) AllElement() []IElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IElementContext)(nil)).Elem())
	var tst = make([]IElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IElementContext)
		}
	}

	return tst
}

func (s *Element_listContext) Element(i int) IElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IElementContext)
}

func (s *Element_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Element_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Element_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterElement_list(s)
	}
}

func (s *Element_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitElement_list(s)
	}
}




func (p *ModelicaParser) Element_list() (localctx IElement_listContext) {
	localctx = NewElement_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, ModelicaParserRULE_element_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(378)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ModelicaParserT__2) | (1 << ModelicaParserT__3) | (1 << ModelicaParserT__4) | (1 << ModelicaParserT__5) | (1 << ModelicaParserT__6) | (1 << ModelicaParserT__7) | (1 << ModelicaParserT__8) | (1 << ModelicaParserT__9) | (1 << ModelicaParserT__10) | (1 << ModelicaParserT__11) | (1 << ModelicaParserT__12) | (1 << ModelicaParserT__13) | (1 << ModelicaParserT__14) | (1 << ModelicaParserT__15) | (1 << ModelicaParserT__16) | (1 << ModelicaParserT__18) | (1 << ModelicaParserT__29) | (1 << ModelicaParserT__30))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (ModelicaParserT__31 - 32)) | (1 << (ModelicaParserT__32 - 32)) | (1 << (ModelicaParserT__33 - 32)) | (1 << (ModelicaParserT__38 - 32)) | (1 << (ModelicaParserT__39 - 32)) | (1 << (ModelicaParserT__40 - 32)) | (1 << (ModelicaParserT__41 - 32)) | (1 << (ModelicaParserT__42 - 32)) | (1 << (ModelicaParserT__43 - 32)) | (1 << (ModelicaParserT__44 - 32)))) != 0) || _la == ModelicaParserT__86 || _la == ModelicaParserIDENT {
		{
			p.SetState(373)
			p.Element()
		}
		{
			p.SetState(374)
			p.Match(ModelicaParserT__1)
		}


		p.SetState(380)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IElementContext is an interface to support dynamic dispatch.
type IElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElementContext differentiates from other interfaces.
	IsElementContext()
}

type ElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementContext() *ElementContext {
	var p = new(ElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_element
	return p
}

func (*ElementContext) IsElementContext() {}

func NewElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementContext {
	var p = new(ElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_element

	return p
}

func (s *ElementContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementContext) Import_clause() IImport_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImport_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImport_clauseContext)
}

func (s *ElementContext) Extends_clause() IExtends_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExtends_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExtends_clauseContext)
}

func (s *ElementContext) Class_definition() IClass_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_definitionContext)
}

func (s *ElementContext) Component_clause() IComponent_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComponent_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComponent_clauseContext)
}

func (s *ElementContext) Constraining_clause() IConstraining_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraining_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraining_clauseContext)
}

func (s *ElementContext) String_comment() IString_commentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_commentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_commentContext)
}

func (s *ElementContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *ElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterElement(s)
	}
}

func (s *ElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitElement(s)
	}
}




func (p *ModelicaParser) Element() (localctx IElementContext) {
	localctx = NewElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, ModelicaParserRULE_element)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(415)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ModelicaParserT__33:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(381)
			p.Import_clause()
		}


	case ModelicaParserT__18:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(382)
			p.Extends_clause()
		}


	case ModelicaParserT__2, ModelicaParserT__3, ModelicaParserT__4, ModelicaParserT__5, ModelicaParserT__6, ModelicaParserT__7, ModelicaParserT__8, ModelicaParserT__9, ModelicaParserT__10, ModelicaParserT__11, ModelicaParserT__12, ModelicaParserT__13, ModelicaParserT__14, ModelicaParserT__15, ModelicaParserT__16, ModelicaParserT__29, ModelicaParserT__30, ModelicaParserT__31, ModelicaParserT__32, ModelicaParserT__38, ModelicaParserT__39, ModelicaParserT__40, ModelicaParserT__41, ModelicaParserT__42, ModelicaParserT__43, ModelicaParserT__44, ModelicaParserT__86, ModelicaParserIDENT:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(384)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserT__29 {
			{
				p.SetState(383)
				p.Match(ModelicaParserT__29)
			}

		}
		p.SetState(387)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserT__2 {
			{
				p.SetState(386)
				p.Match(ModelicaParserT__2)
			}

		}
		p.SetState(390)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserT__30 {
			{
				p.SetState(389)
				p.Match(ModelicaParserT__30)
			}

		}
		p.SetState(393)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserT__31 {
			{
				p.SetState(392)
				p.Match(ModelicaParserT__31)
			}

		}
		p.SetState(413)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case ModelicaParserT__3, ModelicaParserT__4, ModelicaParserT__5, ModelicaParserT__6, ModelicaParserT__7, ModelicaParserT__8, ModelicaParserT__9, ModelicaParserT__10, ModelicaParserT__11, ModelicaParserT__12, ModelicaParserT__13, ModelicaParserT__14, ModelicaParserT__15, ModelicaParserT__16, ModelicaParserT__38, ModelicaParserT__39, ModelicaParserT__40, ModelicaParserT__41, ModelicaParserT__42, ModelicaParserT__43, ModelicaParserT__44, ModelicaParserT__86, ModelicaParserIDENT:
			p.SetState(397)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case ModelicaParserT__3, ModelicaParserT__4, ModelicaParserT__5, ModelicaParserT__6, ModelicaParserT__7, ModelicaParserT__8, ModelicaParserT__9, ModelicaParserT__10, ModelicaParserT__11, ModelicaParserT__12, ModelicaParserT__13, ModelicaParserT__14, ModelicaParserT__15, ModelicaParserT__16:
				{
					p.SetState(395)
					p.Class_definition()
				}


			case ModelicaParserT__38, ModelicaParserT__39, ModelicaParserT__40, ModelicaParserT__41, ModelicaParserT__42, ModelicaParserT__43, ModelicaParserT__44, ModelicaParserT__86, ModelicaParserIDENT:
				{
					p.SetState(396)
					p.Component_clause()
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}


		case ModelicaParserT__32:
			{
				p.SetState(399)
				p.Match(ModelicaParserT__32)
			}
			p.SetState(402)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case ModelicaParserT__3, ModelicaParserT__4, ModelicaParserT__5, ModelicaParserT__6, ModelicaParserT__7, ModelicaParserT__8, ModelicaParserT__9, ModelicaParserT__10, ModelicaParserT__11, ModelicaParserT__12, ModelicaParserT__13, ModelicaParserT__14, ModelicaParserT__15, ModelicaParserT__16:
				{
					p.SetState(400)
					p.Class_definition()
				}


			case ModelicaParserT__38, ModelicaParserT__39, ModelicaParserT__40, ModelicaParserT__41, ModelicaParserT__42, ModelicaParserT__43, ModelicaParserT__44, ModelicaParserT__86, ModelicaParserIDENT:
				{
					p.SetState(401)
					p.Component_clause()
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			p.SetState(411)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == ModelicaParserT__37 {
				{
					p.SetState(404)
					p.Constraining_clause()
				}
				p.SetState(406)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == ModelicaParserSTRING {
					{
						p.SetState(405)
						p.String_comment()
					}

				}
				p.SetState(409)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == ModelicaParserT__87 {
					{
						p.SetState(408)
						p.Annotation()
					}

				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IImport_clauseContext is an interface to support dynamic dispatch.
type IImport_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImport_clauseContext differentiates from other interfaces.
	IsImport_clauseContext()
}

type Import_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImport_clauseContext() *Import_clauseContext {
	var p = new(Import_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_import_clause
	return p
}

func (*Import_clauseContext) IsImport_clauseContext() {}

func NewImport_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Import_clauseContext {
	var p = new(Import_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_import_clause

	return p
}

func (s *Import_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Import_clauseContext) IDENT() antlr.TerminalNode {
	return s.GetToken(ModelicaParserIDENT, 0)
}

func (s *Import_clauseContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Import_clauseContext) Import_list() IImport_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImport_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImport_listContext)
}

func (s *Import_clauseContext) String_comment() IString_commentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_commentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_commentContext)
}

func (s *Import_clauseContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *Import_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Import_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Import_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterImport_clause(s)
	}
}

func (s *Import_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitImport_clause(s)
	}
}




func (p *ModelicaParser) Import_clause() (localctx IImport_clauseContext) {
	localctx = NewImport_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, ModelicaParserRULE_import_clause)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(417)
		p.Match(ModelicaParserT__33)
	}
	p.SetState(430)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(418)
			p.Match(ModelicaParserIDENT)
		}
		{
			p.SetState(419)
			p.Match(ModelicaParserT__19)
		}
		{
			p.SetState(420)
			p.Name()
		}


	case 2:
		{
			p.SetState(421)
			p.Name()
		}
		{
			p.SetState(422)
			p.Match(ModelicaParserT__34)
		}


	case 3:
		{
			p.SetState(424)
			p.Name()
		}
		{
			p.SetState(425)
			p.Match(ModelicaParserT__35)
		}
		{
			p.SetState(426)
			p.Import_list()
		}
		{
			p.SetState(427)
			p.Match(ModelicaParserT__36)
		}


	case 4:
		{
			p.SetState(429)
			p.Name()
		}

	}
	p.SetState(433)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserSTRING {
		{
			p.SetState(432)
			p.String_comment()
		}

	}
	p.SetState(436)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__87 {
		{
			p.SetState(435)
			p.Annotation()
		}

	}



	return localctx
}


// IImport_listContext is an interface to support dynamic dispatch.
type IImport_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImport_listContext differentiates from other interfaces.
	IsImport_listContext()
}

type Import_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImport_listContext() *Import_listContext {
	var p = new(Import_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_import_list
	return p
}

func (*Import_listContext) IsImport_listContext() {}

func NewImport_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Import_listContext {
	var p = new(Import_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_import_list

	return p
}

func (s *Import_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Import_listContext) AllIDENT() []antlr.TerminalNode {
	return s.GetTokens(ModelicaParserIDENT)
}

func (s *Import_listContext) IDENT(i int) antlr.TerminalNode {
	return s.GetToken(ModelicaParserIDENT, i)
}

func (s *Import_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Import_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Import_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterImport_list(s)
	}
}

func (s *Import_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitImport_list(s)
	}
}




func (p *ModelicaParser) Import_list() (localctx IImport_listContext) {
	localctx = NewImport_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, ModelicaParserRULE_import_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(438)
		p.Match(ModelicaParserIDENT)
	}
	p.SetState(443)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ModelicaParserT__25 {
		{
			p.SetState(439)
			p.Match(ModelicaParserT__25)
		}
		{
			p.SetState(440)
			p.Match(ModelicaParserIDENT)
		}


		p.SetState(445)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IExtends_clauseContext is an interface to support dynamic dispatch.
type IExtends_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExtends_clauseContext differentiates from other interfaces.
	IsExtends_clauseContext()
}

type Extends_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtends_clauseContext() *Extends_clauseContext {
	var p = new(Extends_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_extends_clause
	return p
}

func (*Extends_clauseContext) IsExtends_clauseContext() {}

func NewExtends_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Extends_clauseContext {
	var p = new(Extends_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_extends_clause

	return p
}

func (s *Extends_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Extends_clauseContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Extends_clauseContext) Class_modification() IClass_modificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_modificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_modificationContext)
}

func (s *Extends_clauseContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *Extends_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Extends_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Extends_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterExtends_clause(s)
	}
}

func (s *Extends_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitExtends_clause(s)
	}
}




func (p *ModelicaParser) Extends_clause() (localctx IExtends_clauseContext) {
	localctx = NewExtends_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, ModelicaParserRULE_extends_clause)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(446)
		p.Match(ModelicaParserT__18)
	}
	{
		p.SetState(447)
		p.Name()
	}
	p.SetState(449)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__21 {
		{
			p.SetState(448)
			p.Class_modification()
		}

	}
	p.SetState(452)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__87 {
		{
			p.SetState(451)
			p.Annotation()
		}

	}



	return localctx
}


// IConstraining_clauseContext is an interface to support dynamic dispatch.
type IConstraining_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstraining_clauseContext differentiates from other interfaces.
	IsConstraining_clauseContext()
}

type Constraining_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraining_clauseContext() *Constraining_clauseContext {
	var p = new(Constraining_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_constraining_clause
	return p
}

func (*Constraining_clauseContext) IsConstraining_clauseContext() {}

func NewConstraining_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constraining_clauseContext {
	var p = new(Constraining_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_constraining_clause

	return p
}

func (s *Constraining_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Constraining_clauseContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Constraining_clauseContext) Class_modification() IClass_modificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_modificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_modificationContext)
}

func (s *Constraining_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constraining_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Constraining_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterConstraining_clause(s)
	}
}

func (s *Constraining_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitConstraining_clause(s)
	}
}




func (p *ModelicaParser) Constraining_clause() (localctx IConstraining_clauseContext) {
	localctx = NewConstraining_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, ModelicaParserRULE_constraining_clause)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(454)
		p.Match(ModelicaParserT__37)
	}
	{
		p.SetState(455)
		p.Name()
	}
	p.SetState(457)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__21 {
		{
			p.SetState(456)
			p.Class_modification()
		}

	}



	return localctx
}


// IComponent_clauseContext is an interface to support dynamic dispatch.
type IComponent_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComponent_clauseContext differentiates from other interfaces.
	IsComponent_clauseContext()
}

type Component_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComponent_clauseContext() *Component_clauseContext {
	var p = new(Component_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_component_clause
	return p
}

func (*Component_clauseContext) IsComponent_clauseContext() {}

func NewComponent_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Component_clauseContext {
	var p = new(Component_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_component_clause

	return p
}

func (s *Component_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Component_clauseContext) Type_prefix() IType_prefixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_prefixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_prefixContext)
}

func (s *Component_clauseContext) Type_specifier() IType_specifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_specifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_specifierContext)
}

func (s *Component_clauseContext) Component_list() IComponent_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComponent_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComponent_listContext)
}

func (s *Component_clauseContext) Array_subscripts() IArray_subscriptsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_subscriptsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_subscriptsContext)
}

func (s *Component_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Component_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Component_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterComponent_clause(s)
	}
}

func (s *Component_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitComponent_clause(s)
	}
}




func (p *ModelicaParser) Component_clause() (localctx IComponent_clauseContext) {
	localctx = NewComponent_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, ModelicaParserRULE_component_clause)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(459)
		p.Type_prefix()
	}
	{
		p.SetState(460)
		p.Type_specifier()
	}
	p.SetState(462)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__83 {
		{
			p.SetState(461)
			p.Array_subscripts()
		}

	}
	{
		p.SetState(464)
		p.Component_list()
	}



	return localctx
}


// IType_prefixContext is an interface to support dynamic dispatch.
type IType_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_prefixContext differentiates from other interfaces.
	IsType_prefixContext()
}

type Type_prefixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_prefixContext() *Type_prefixContext {
	var p = new(Type_prefixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_type_prefix
	return p
}

func (*Type_prefixContext) IsType_prefixContext() {}

func NewType_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_prefixContext {
	var p = new(Type_prefixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_type_prefix

	return p
}

func (s *Type_prefixContext) GetParser() antlr.Parser { return s.parser }
func (s *Type_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Type_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterType_prefix(s)
	}
}

func (s *Type_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitType_prefix(s)
	}
}




func (p *ModelicaParser) Type_prefix() (localctx IType_prefixContext) {
	localctx = NewType_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, ModelicaParserRULE_type_prefix)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(467)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__38 || _la == ModelicaParserT__39 {
		{
			p.SetState(466)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ModelicaParserT__38 || _la == ModelicaParserT__39) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(470)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if ((((_la - 41)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 41))) & ((1 << (ModelicaParserT__40 - 41)) | (1 << (ModelicaParserT__41 - 41)) | (1 << (ModelicaParserT__42 - 41)))) != 0) {
		{
			p.SetState(469)
			_la = p.GetTokenStream().LA(1)

			if !(((((_la - 41)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 41))) & ((1 << (ModelicaParserT__40 - 41)) | (1 << (ModelicaParserT__41 - 41)) | (1 << (ModelicaParserT__42 - 41)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(473)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__43 || _la == ModelicaParserT__44 {
		{
			p.SetState(472)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ModelicaParserT__43 || _la == ModelicaParserT__44) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}



	return localctx
}


// IType_specifierContext is an interface to support dynamic dispatch.
type IType_specifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_specifierContext differentiates from other interfaces.
	IsType_specifierContext()
}

type Type_specifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_specifierContext() *Type_specifierContext {
	var p = new(Type_specifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_type_specifier
	return p
}

func (*Type_specifierContext) IsType_specifierContext() {}

func NewType_specifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_specifierContext {
	var p = new(Type_specifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_type_specifier

	return p
}

func (s *Type_specifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_specifierContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Type_specifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_specifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Type_specifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterType_specifier(s)
	}
}

func (s *Type_specifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitType_specifier(s)
	}
}




func (p *ModelicaParser) Type_specifier() (localctx IType_specifierContext) {
	localctx = NewType_specifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, ModelicaParserRULE_type_specifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(475)
		p.Name()
	}



	return localctx
}


// IComponent_listContext is an interface to support dynamic dispatch.
type IComponent_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComponent_listContext differentiates from other interfaces.
	IsComponent_listContext()
}

type Component_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComponent_listContext() *Component_listContext {
	var p = new(Component_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_component_list
	return p
}

func (*Component_listContext) IsComponent_listContext() {}

func NewComponent_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Component_listContext {
	var p = new(Component_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_component_list

	return p
}

func (s *Component_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Component_listContext) AllComponent_declaration() []IComponent_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IComponent_declarationContext)(nil)).Elem())
	var tst = make([]IComponent_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IComponent_declarationContext)
		}
	}

	return tst
}

func (s *Component_listContext) Component_declaration(i int) IComponent_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComponent_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IComponent_declarationContext)
}

func (s *Component_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Component_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Component_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterComponent_list(s)
	}
}

func (s *Component_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitComponent_list(s)
	}
}




func (p *ModelicaParser) Component_list() (localctx IComponent_listContext) {
	localctx = NewComponent_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, ModelicaParserRULE_component_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(477)
		p.Component_declaration()
	}
	p.SetState(482)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ModelicaParserT__25 {
		{
			p.SetState(478)
			p.Match(ModelicaParserT__25)
		}
		{
			p.SetState(479)
			p.Component_declaration()
		}


		p.SetState(484)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IComponent_declarationContext is an interface to support dynamic dispatch.
type IComponent_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComponent_declarationContext differentiates from other interfaces.
	IsComponent_declarationContext()
}

type Component_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComponent_declarationContext() *Component_declarationContext {
	var p = new(Component_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_component_declaration
	return p
}

func (*Component_declarationContext) IsComponent_declarationContext() {}

func NewComponent_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Component_declarationContext {
	var p = new(Component_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_component_declaration

	return p
}

func (s *Component_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Component_declarationContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *Component_declarationContext) Condition_attribute() ICondition_attributeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICondition_attributeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICondition_attributeContext)
}

func (s *Component_declarationContext) String_comment() IString_commentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_commentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_commentContext)
}

func (s *Component_declarationContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *Component_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Component_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Component_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterComponent_declaration(s)
	}
}

func (s *Component_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitComponent_declaration(s)
	}
}




func (p *ModelicaParser) Component_declaration() (localctx IComponent_declarationContext) {
	localctx = NewComponent_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, ModelicaParserRULE_component_declaration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(485)
		p.Declaration()
	}
	p.SetState(487)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__45 {
		{
			p.SetState(486)
			p.Condition_attribute()
		}

	}
	p.SetState(490)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserSTRING {
		{
			p.SetState(489)
			p.String_comment()
		}

	}
	p.SetState(493)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__87 {
		{
			p.SetState(492)
			p.Annotation()
		}

	}



	return localctx
}


// ICondition_attributeContext is an interface to support dynamic dispatch.
type ICondition_attributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCondition_attributeContext differentiates from other interfaces.
	IsCondition_attributeContext()
}

type Condition_attributeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCondition_attributeContext() *Condition_attributeContext {
	var p = new(Condition_attributeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_condition_attribute
	return p
}

func (*Condition_attributeContext) IsCondition_attributeContext() {}

func NewCondition_attributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Condition_attributeContext {
	var p = new(Condition_attributeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_condition_attribute

	return p
}

func (s *Condition_attributeContext) GetParser() antlr.Parser { return s.parser }

func (s *Condition_attributeContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Condition_attributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Condition_attributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Condition_attributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterCondition_attribute(s)
	}
}

func (s *Condition_attributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitCondition_attribute(s)
	}
}




func (p *ModelicaParser) Condition_attribute() (localctx ICondition_attributeContext) {
	localctx = NewCondition_attributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, ModelicaParserRULE_condition_attribute)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(495)
		p.Match(ModelicaParserT__45)
	}
	{
		p.SetState(496)
		p.Expression()
	}



	return localctx
}


// IDeclarationContext is an interface to support dynamic dispatch.
type IDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationContext differentiates from other interfaces.
	IsDeclarationContext()
}

type DeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationContext() *DeclarationContext {
	var p = new(DeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_declaration
	return p
}

func (*DeclarationContext) IsDeclarationContext() {}

func NewDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationContext {
	var p = new(DeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_declaration

	return p
}

func (s *DeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationContext) IDENT() antlr.TerminalNode {
	return s.GetToken(ModelicaParserIDENT, 0)
}

func (s *DeclarationContext) Array_subscripts() IArray_subscriptsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_subscriptsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_subscriptsContext)
}

func (s *DeclarationContext) Modification() IModificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModificationContext)
}

func (s *DeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *DeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterDeclaration(s)
	}
}

func (s *DeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitDeclaration(s)
	}
}




func (p *ModelicaParser) Declaration() (localctx IDeclarationContext) {
	localctx = NewDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, ModelicaParserRULE_declaration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(498)
		p.Match(ModelicaParserIDENT)
	}
	p.SetState(500)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__83 {
		{
			p.SetState(499)
			p.Array_subscripts()
		}

	}
	p.SetState(503)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if ((((_la - 20)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 20))) & ((1 << (ModelicaParserT__19 - 20)) | (1 << (ModelicaParserT__21 - 20)) | (1 << (ModelicaParserT__46 - 20)))) != 0) {
		{
			p.SetState(502)
			p.Modification()
		}

	}



	return localctx
}


// IModificationContext is an interface to support dynamic dispatch.
type IModificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModificationContext differentiates from other interfaces.
	IsModificationContext()
}

type ModificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModificationContext() *ModificationContext {
	var p = new(ModificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_modification
	return p
}

func (*ModificationContext) IsModificationContext() {}

func NewModificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModificationContext {
	var p = new(ModificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_modification

	return p
}

func (s *ModificationContext) GetParser() antlr.Parser { return s.parser }

func (s *ModificationContext) Class_modification() IClass_modificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_modificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_modificationContext)
}

func (s *ModificationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ModificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ModificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterModification(s)
	}
}

func (s *ModificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitModification(s)
	}
}




func (p *ModelicaParser) Modification() (localctx IModificationContext) {
	localctx = NewModificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, ModelicaParserRULE_modification)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(514)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ModelicaParserT__21:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(505)
			p.Class_modification()
		}
		p.SetState(508)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserT__19 {
			{
				p.SetState(506)
				p.Match(ModelicaParserT__19)
			}
			{
				p.SetState(507)
				p.Expression()
			}

		}


	case ModelicaParserT__19:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(510)
			p.Match(ModelicaParserT__19)
		}
		{
			p.SetState(511)
			p.Expression()
		}


	case ModelicaParserT__46:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(512)
			p.Match(ModelicaParserT__46)
		}
		{
			p.SetState(513)
			p.Expression()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IClass_modificationContext is an interface to support dynamic dispatch.
type IClass_modificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClass_modificationContext differentiates from other interfaces.
	IsClass_modificationContext()
}

type Class_modificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClass_modificationContext() *Class_modificationContext {
	var p = new(Class_modificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_class_modification
	return p
}

func (*Class_modificationContext) IsClass_modificationContext() {}

func NewClass_modificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Class_modificationContext {
	var p = new(Class_modificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_class_modification

	return p
}

func (s *Class_modificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Class_modificationContext) Argument_list() IArgument_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgument_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgument_listContext)
}

func (s *Class_modificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_modificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Class_modificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterClass_modification(s)
	}
}

func (s *Class_modificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitClass_modification(s)
	}
}




func (p *ModelicaParser) Class_modification() (localctx IClass_modificationContext) {
	localctx = NewClass_modificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, ModelicaParserRULE_class_modification)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(516)
		p.Match(ModelicaParserT__21)
	}
	p.SetState(518)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__2 || _la == ModelicaParserT__29 || _la == ModelicaParserT__32 || _la == ModelicaParserT__47 || _la == ModelicaParserT__86 || _la == ModelicaParserIDENT {
		{
			p.SetState(517)
			p.Argument_list()
		}

	}
	{
		p.SetState(520)
		p.Match(ModelicaParserT__23)
	}



	return localctx
}


// IArgument_listContext is an interface to support dynamic dispatch.
type IArgument_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgument_listContext differentiates from other interfaces.
	IsArgument_listContext()
}

type Argument_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgument_listContext() *Argument_listContext {
	var p = new(Argument_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_argument_list
	return p
}

func (*Argument_listContext) IsArgument_listContext() {}

func NewArgument_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Argument_listContext {
	var p = new(Argument_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_argument_list

	return p
}

func (s *Argument_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Argument_listContext) AllArgument() []IArgumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IArgumentContext)(nil)).Elem())
	var tst = make([]IArgumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IArgumentContext)
		}
	}

	return tst
}

func (s *Argument_listContext) Argument(i int) IArgumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IArgumentContext)
}

func (s *Argument_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Argument_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Argument_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterArgument_list(s)
	}
}

func (s *Argument_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitArgument_list(s)
	}
}




func (p *ModelicaParser) Argument_list() (localctx IArgument_listContext) {
	localctx = NewArgument_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, ModelicaParserRULE_argument_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(522)
		p.Argument()
	}
	p.SetState(527)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ModelicaParserT__25 {
		{
			p.SetState(523)
			p.Match(ModelicaParserT__25)
		}
		{
			p.SetState(524)
			p.Argument()
		}


		p.SetState(529)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IArgumentContext is an interface to support dynamic dispatch.
type IArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentContext differentiates from other interfaces.
	IsArgumentContext()
}

type ArgumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentContext() *ArgumentContext {
	var p = new(ArgumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_argument
	return p
}

func (*ArgumentContext) IsArgumentContext() {}

func NewArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentContext {
	var p = new(ArgumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_argument

	return p
}

func (s *ArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentContext) Element_modification_or_replaceable() IElement_modification_or_replaceableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElement_modification_or_replaceableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElement_modification_or_replaceableContext)
}

func (s *ArgumentContext) Element_redeclaration() IElement_redeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElement_redeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElement_redeclarationContext)
}

func (s *ArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ArgumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterArgument(s)
	}
}

func (s *ArgumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitArgument(s)
	}
}




func (p *ModelicaParser) Argument() (localctx IArgumentContext) {
	localctx = NewArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, ModelicaParserRULE_argument)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(532)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ModelicaParserT__2, ModelicaParserT__32, ModelicaParserT__47, ModelicaParserT__86, ModelicaParserIDENT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(530)
			p.Element_modification_or_replaceable()
		}


	case ModelicaParserT__29:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(531)
			p.Element_redeclaration()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IElement_modification_or_replaceableContext is an interface to support dynamic dispatch.
type IElement_modification_or_replaceableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElement_modification_or_replaceableContext differentiates from other interfaces.
	IsElement_modification_or_replaceableContext()
}

type Element_modification_or_replaceableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElement_modification_or_replaceableContext() *Element_modification_or_replaceableContext {
	var p = new(Element_modification_or_replaceableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_element_modification_or_replaceable
	return p
}

func (*Element_modification_or_replaceableContext) IsElement_modification_or_replaceableContext() {}

func NewElement_modification_or_replaceableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Element_modification_or_replaceableContext {
	var p = new(Element_modification_or_replaceableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_element_modification_or_replaceable

	return p
}

func (s *Element_modification_or_replaceableContext) GetParser() antlr.Parser { return s.parser }

func (s *Element_modification_or_replaceableContext) Element_modification() IElement_modificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElement_modificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElement_modificationContext)
}

func (s *Element_modification_or_replaceableContext) Element_replaceable() IElement_replaceableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElement_replaceableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElement_replaceableContext)
}

func (s *Element_modification_or_replaceableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Element_modification_or_replaceableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Element_modification_or_replaceableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterElement_modification_or_replaceable(s)
	}
}

func (s *Element_modification_or_replaceableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitElement_modification_or_replaceable(s)
	}
}




func (p *ModelicaParser) Element_modification_or_replaceable() (localctx IElement_modification_or_replaceableContext) {
	localctx = NewElement_modification_or_replaceableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, ModelicaParserRULE_element_modification_or_replaceable)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(535)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__47 {
		{
			p.SetState(534)
			p.Match(ModelicaParserT__47)
		}

	}
	p.SetState(538)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__2 {
		{
			p.SetState(537)
			p.Match(ModelicaParserT__2)
		}

	}
	p.SetState(542)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ModelicaParserT__86, ModelicaParserIDENT:
		{
			p.SetState(540)
			p.Element_modification()
		}


	case ModelicaParserT__32:
		{
			p.SetState(541)
			p.Element_replaceable()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// IElement_modificationContext is an interface to support dynamic dispatch.
type IElement_modificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElement_modificationContext differentiates from other interfaces.
	IsElement_modificationContext()
}

type Element_modificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElement_modificationContext() *Element_modificationContext {
	var p = new(Element_modificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_element_modification
	return p
}

func (*Element_modificationContext) IsElement_modificationContext() {}

func NewElement_modificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Element_modificationContext {
	var p = new(Element_modificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_element_modification

	return p
}

func (s *Element_modificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Element_modificationContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Element_modificationContext) Modification() IModificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModificationContext)
}

func (s *Element_modificationContext) String_comment() IString_commentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_commentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_commentContext)
}

func (s *Element_modificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Element_modificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Element_modificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterElement_modification(s)
	}
}

func (s *Element_modificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitElement_modification(s)
	}
}




func (p *ModelicaParser) Element_modification() (localctx IElement_modificationContext) {
	localctx = NewElement_modificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, ModelicaParserRULE_element_modification)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(544)
		p.Name()
	}
	p.SetState(546)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if ((((_la - 20)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 20))) & ((1 << (ModelicaParserT__19 - 20)) | (1 << (ModelicaParserT__21 - 20)) | (1 << (ModelicaParserT__46 - 20)))) != 0) {
		{
			p.SetState(545)
			p.Modification()
		}

	}
	p.SetState(549)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserSTRING {
		{
			p.SetState(548)
			p.String_comment()
		}

	}



	return localctx
}


// IElement_redeclarationContext is an interface to support dynamic dispatch.
type IElement_redeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElement_redeclarationContext differentiates from other interfaces.
	IsElement_redeclarationContext()
}

type Element_redeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElement_redeclarationContext() *Element_redeclarationContext {
	var p = new(Element_redeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_element_redeclaration
	return p
}

func (*Element_redeclarationContext) IsElement_redeclarationContext() {}

func NewElement_redeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Element_redeclarationContext {
	var p = new(Element_redeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_element_redeclaration

	return p
}

func (s *Element_redeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Element_redeclarationContext) Element_replaceable() IElement_replaceableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElement_replaceableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElement_replaceableContext)
}

func (s *Element_redeclarationContext) Short_class_definition() IShort_class_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShort_class_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShort_class_definitionContext)
}

func (s *Element_redeclarationContext) Component_clause1() IComponent_clause1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComponent_clause1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComponent_clause1Context)
}

func (s *Element_redeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Element_redeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Element_redeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterElement_redeclaration(s)
	}
}

func (s *Element_redeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitElement_redeclaration(s)
	}
}




func (p *ModelicaParser) Element_redeclaration() (localctx IElement_redeclarationContext) {
	localctx = NewElement_redeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, ModelicaParserRULE_element_redeclaration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(551)
		p.Match(ModelicaParserT__29)
	}
	p.SetState(553)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__47 {
		{
			p.SetState(552)
			p.Match(ModelicaParserT__47)
		}

	}
	p.SetState(556)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__2 {
		{
			p.SetState(555)
			p.Match(ModelicaParserT__2)
		}

	}
	p.SetState(563)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ModelicaParserT__4, ModelicaParserT__5, ModelicaParserT__6, ModelicaParserT__7, ModelicaParserT__8, ModelicaParserT__9, ModelicaParserT__10, ModelicaParserT__11, ModelicaParserT__12, ModelicaParserT__13, ModelicaParserT__14, ModelicaParserT__15, ModelicaParserT__16, ModelicaParserT__38, ModelicaParserT__39, ModelicaParserT__40, ModelicaParserT__41, ModelicaParserT__42, ModelicaParserT__43, ModelicaParserT__44, ModelicaParserT__86, ModelicaParserIDENT:
		p.SetState(560)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case ModelicaParserT__4, ModelicaParserT__5, ModelicaParserT__6, ModelicaParserT__7, ModelicaParserT__8, ModelicaParserT__9, ModelicaParserT__10, ModelicaParserT__11, ModelicaParserT__12, ModelicaParserT__13, ModelicaParserT__14, ModelicaParserT__15, ModelicaParserT__16:
			{
				p.SetState(558)
				p.Short_class_definition()
			}


		case ModelicaParserT__38, ModelicaParserT__39, ModelicaParserT__40, ModelicaParserT__41, ModelicaParserT__42, ModelicaParserT__43, ModelicaParserT__44, ModelicaParserT__86, ModelicaParserIDENT:
			{
				p.SetState(559)
				p.Component_clause1()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case ModelicaParserT__32:
		{
			p.SetState(562)
			p.Element_replaceable()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// IElement_replaceableContext is an interface to support dynamic dispatch.
type IElement_replaceableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElement_replaceableContext differentiates from other interfaces.
	IsElement_replaceableContext()
}

type Element_replaceableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElement_replaceableContext() *Element_replaceableContext {
	var p = new(Element_replaceableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_element_replaceable
	return p
}

func (*Element_replaceableContext) IsElement_replaceableContext() {}

func NewElement_replaceableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Element_replaceableContext {
	var p = new(Element_replaceableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_element_replaceable

	return p
}

func (s *Element_replaceableContext) GetParser() antlr.Parser { return s.parser }

func (s *Element_replaceableContext) Short_class_definition() IShort_class_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShort_class_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShort_class_definitionContext)
}

func (s *Element_replaceableContext) Component_clause1() IComponent_clause1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComponent_clause1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComponent_clause1Context)
}

func (s *Element_replaceableContext) Constraining_clause() IConstraining_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraining_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraining_clauseContext)
}

func (s *Element_replaceableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Element_replaceableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Element_replaceableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterElement_replaceable(s)
	}
}

func (s *Element_replaceableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitElement_replaceable(s)
	}
}




func (p *ModelicaParser) Element_replaceable() (localctx IElement_replaceableContext) {
	localctx = NewElement_replaceableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, ModelicaParserRULE_element_replaceable)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(565)
		p.Match(ModelicaParserT__32)
	}
	p.SetState(568)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ModelicaParserT__4, ModelicaParserT__5, ModelicaParserT__6, ModelicaParserT__7, ModelicaParserT__8, ModelicaParserT__9, ModelicaParserT__10, ModelicaParserT__11, ModelicaParserT__12, ModelicaParserT__13, ModelicaParserT__14, ModelicaParserT__15, ModelicaParserT__16:
		{
			p.SetState(566)
			p.Short_class_definition()
		}


	case ModelicaParserT__38, ModelicaParserT__39, ModelicaParserT__40, ModelicaParserT__41, ModelicaParserT__42, ModelicaParserT__43, ModelicaParserT__44, ModelicaParserT__86, ModelicaParserIDENT:
		{
			p.SetState(567)
			p.Component_clause1()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(571)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__37 {
		{
			p.SetState(570)
			p.Constraining_clause()
		}

	}



	return localctx
}


// IComponent_clause1Context is an interface to support dynamic dispatch.
type IComponent_clause1Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComponent_clause1Context differentiates from other interfaces.
	IsComponent_clause1Context()
}

type Component_clause1Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComponent_clause1Context() *Component_clause1Context {
	var p = new(Component_clause1Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_component_clause1
	return p
}

func (*Component_clause1Context) IsComponent_clause1Context() {}

func NewComponent_clause1Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Component_clause1Context {
	var p = new(Component_clause1Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_component_clause1

	return p
}

func (s *Component_clause1Context) GetParser() antlr.Parser { return s.parser }

func (s *Component_clause1Context) Type_prefix() IType_prefixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_prefixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_prefixContext)
}

func (s *Component_clause1Context) Type_specifier() IType_specifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_specifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_specifierContext)
}

func (s *Component_clause1Context) Component_declaration1() IComponent_declaration1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComponent_declaration1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComponent_declaration1Context)
}

func (s *Component_clause1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Component_clause1Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Component_clause1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterComponent_clause1(s)
	}
}

func (s *Component_clause1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitComponent_clause1(s)
	}
}




func (p *ModelicaParser) Component_clause1() (localctx IComponent_clause1Context) {
	localctx = NewComponent_clause1Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, ModelicaParserRULE_component_clause1)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(573)
		p.Type_prefix()
	}
	{
		p.SetState(574)
		p.Type_specifier()
	}
	{
		p.SetState(575)
		p.Component_declaration1()
	}



	return localctx
}


// IComponent_declaration1Context is an interface to support dynamic dispatch.
type IComponent_declaration1Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComponent_declaration1Context differentiates from other interfaces.
	IsComponent_declaration1Context()
}

type Component_declaration1Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComponent_declaration1Context() *Component_declaration1Context {
	var p = new(Component_declaration1Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_component_declaration1
	return p
}

func (*Component_declaration1Context) IsComponent_declaration1Context() {}

func NewComponent_declaration1Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Component_declaration1Context {
	var p = new(Component_declaration1Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_component_declaration1

	return p
}

func (s *Component_declaration1Context) GetParser() antlr.Parser { return s.parser }

func (s *Component_declaration1Context) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *Component_declaration1Context) String_comment() IString_commentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_commentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_commentContext)
}

func (s *Component_declaration1Context) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *Component_declaration1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Component_declaration1Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Component_declaration1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterComponent_declaration1(s)
	}
}

func (s *Component_declaration1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitComponent_declaration1(s)
	}
}




func (p *ModelicaParser) Component_declaration1() (localctx IComponent_declaration1Context) {
	localctx = NewComponent_declaration1Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, ModelicaParserRULE_component_declaration1)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(577)
		p.Declaration()
	}
	p.SetState(579)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserSTRING {
		{
			p.SetState(578)
			p.String_comment()
		}

	}
	p.SetState(582)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__87 {
		{
			p.SetState(581)
			p.Annotation()
		}

	}



	return localctx
}


// IShort_class_definitionContext is an interface to support dynamic dispatch.
type IShort_class_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShort_class_definitionContext differentiates from other interfaces.
	IsShort_class_definitionContext()
}

type Short_class_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShort_class_definitionContext() *Short_class_definitionContext {
	var p = new(Short_class_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_short_class_definition
	return p
}

func (*Short_class_definitionContext) IsShort_class_definitionContext() {}

func NewShort_class_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Short_class_definitionContext {
	var p = new(Short_class_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_short_class_definition

	return p
}

func (s *Short_class_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Short_class_definitionContext) Class_prefixes() IClass_prefixesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_prefixesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_prefixesContext)
}

func (s *Short_class_definitionContext) Short_class_specifier() IShort_class_specifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShort_class_specifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShort_class_specifierContext)
}

func (s *Short_class_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Short_class_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Short_class_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterShort_class_definition(s)
	}
}

func (s *Short_class_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitShort_class_definition(s)
	}
}




func (p *ModelicaParser) Short_class_definition() (localctx IShort_class_definitionContext) {
	localctx = NewShort_class_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, ModelicaParserRULE_short_class_definition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(584)
		p.Class_prefixes()
	}
	{
		p.SetState(585)
		p.Short_class_specifier()
	}



	return localctx
}


// IEquation_sectionContext is an interface to support dynamic dispatch.
type IEquation_sectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEquation_sectionContext differentiates from other interfaces.
	IsEquation_sectionContext()
}

type Equation_sectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEquation_sectionContext() *Equation_sectionContext {
	var p = new(Equation_sectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_equation_section
	return p
}

func (*Equation_sectionContext) IsEquation_sectionContext() {}

func NewEquation_sectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Equation_sectionContext {
	var p = new(Equation_sectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_equation_section

	return p
}

func (s *Equation_sectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Equation_sectionContext) Equations() IEquationsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEquationsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEquationsContext)
}

func (s *Equation_sectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Equation_sectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Equation_sectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterEquation_section(s)
	}
}

func (s *Equation_sectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitEquation_section(s)
	}
}




func (p *ModelicaParser) Equation_section() (localctx IEquation_sectionContext) {
	localctx = NewEquation_sectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, ModelicaParserRULE_equation_section)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(588)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__48 {
		{
			p.SetState(587)
			p.Match(ModelicaParserT__48)
		}

	}
	{
		p.SetState(590)
		p.Match(ModelicaParserT__49)
	}
	p.SetState(592)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(591)
			p.Equations()
		}


	}



	return localctx
}


// IEquationsContext is an interface to support dynamic dispatch.
type IEquationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEquationsContext differentiates from other interfaces.
	IsEquationsContext()
}

type EquationsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEquationsContext() *EquationsContext {
	var p = new(EquationsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_equations
	return p
}

func (*EquationsContext) IsEquationsContext() {}

func NewEquationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EquationsContext {
	var p = new(EquationsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_equations

	return p
}

func (s *EquationsContext) GetParser() antlr.Parser { return s.parser }

func (s *EquationsContext) AllEquation() []IEquationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEquationContext)(nil)).Elem())
	var tst = make([]IEquationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEquationContext)
		}
	}

	return tst
}

func (s *EquationsContext) Equation(i int) IEquationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEquationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEquationContext)
}

func (s *EquationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EquationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *EquationsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterEquations(s)
	}
}

func (s *EquationsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitEquations(s)
	}
}




func (p *ModelicaParser) Equations() (localctx IEquationsContext) {
	localctx = NewEquationsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, ModelicaParserRULE_equations)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(597)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
				{
					p.SetState(594)
					p.Equation()
				}
				{
					p.SetState(595)
					p.Match(ModelicaParserT__1)
				}




		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(599)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext())
	}



	return localctx
}


// IAlgorithm_sectionContext is an interface to support dynamic dispatch.
type IAlgorithm_sectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlgorithm_sectionContext differentiates from other interfaces.
	IsAlgorithm_sectionContext()
}

type Algorithm_sectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlgorithm_sectionContext() *Algorithm_sectionContext {
	var p = new(Algorithm_sectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_algorithm_section
	return p
}

func (*Algorithm_sectionContext) IsAlgorithm_sectionContext() {}

func NewAlgorithm_sectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Algorithm_sectionContext {
	var p = new(Algorithm_sectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_algorithm_section

	return p
}

func (s *Algorithm_sectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Algorithm_sectionContext) Algorithm_statements() IAlgorithm_statementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlgorithm_statementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlgorithm_statementsContext)
}

func (s *Algorithm_sectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Algorithm_sectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Algorithm_sectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterAlgorithm_section(s)
	}
}

func (s *Algorithm_sectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitAlgorithm_section(s)
	}
}




func (p *ModelicaParser) Algorithm_section() (localctx IAlgorithm_sectionContext) {
	localctx = NewAlgorithm_sectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, ModelicaParserRULE_algorithm_section)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(602)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__48 {
		{
			p.SetState(601)
			p.Match(ModelicaParserT__48)
		}

	}
	{
		p.SetState(604)
		p.Match(ModelicaParserT__50)
	}
	p.SetState(606)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__21 || ((((_la - 46)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 46))) & ((1 << (ModelicaParserT__45 - 46)) | (1 << (ModelicaParserT__51 - 46)) | (1 << (ModelicaParserT__52 - 46)) | (1 << (ModelicaParserT__56 - 46)) | (1 << (ModelicaParserT__59 - 46)) | (1 << (ModelicaParserT__60 - 46)))) != 0) || _la == ModelicaParserT__86 || _la == ModelicaParserIDENT {
		{
			p.SetState(605)
			p.Algorithm_statements()
		}

	}



	return localctx
}


// IAlgorithm_statementsContext is an interface to support dynamic dispatch.
type IAlgorithm_statementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlgorithm_statementsContext differentiates from other interfaces.
	IsAlgorithm_statementsContext()
}

type Algorithm_statementsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlgorithm_statementsContext() *Algorithm_statementsContext {
	var p = new(Algorithm_statementsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_algorithm_statements
	return p
}

func (*Algorithm_statementsContext) IsAlgorithm_statementsContext() {}

func NewAlgorithm_statementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Algorithm_statementsContext {
	var p = new(Algorithm_statementsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_algorithm_statements

	return p
}

func (s *Algorithm_statementsContext) GetParser() antlr.Parser { return s.parser }

func (s *Algorithm_statementsContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Algorithm_statementsContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Algorithm_statementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Algorithm_statementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Algorithm_statementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterAlgorithm_statements(s)
	}
}

func (s *Algorithm_statementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitAlgorithm_statements(s)
	}
}




func (p *ModelicaParser) Algorithm_statements() (localctx IAlgorithm_statementsContext) {
	localctx = NewAlgorithm_statementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, ModelicaParserRULE_algorithm_statements)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(611)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for ok := true; ok; ok = _la == ModelicaParserT__21 || ((((_la - 46)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 46))) & ((1 << (ModelicaParserT__45 - 46)) | (1 << (ModelicaParserT__51 - 46)) | (1 << (ModelicaParserT__52 - 46)) | (1 << (ModelicaParserT__56 - 46)) | (1 << (ModelicaParserT__59 - 46)) | (1 << (ModelicaParserT__60 - 46)))) != 0) || _la == ModelicaParserT__86 || _la == ModelicaParserIDENT {
		{
			p.SetState(608)
			p.Statement()
		}
		{
			p.SetState(609)
			p.Match(ModelicaParserT__1)
		}


		p.SetState(613)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IEquationContext is an interface to support dynamic dispatch.
type IEquationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEquationContext differentiates from other interfaces.
	IsEquationContext()
}

type EquationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEquationContext() *EquationContext {
	var p = new(EquationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_equation
	return p
}

func (*EquationContext) IsEquationContext() {}

func NewEquationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EquationContext {
	var p = new(EquationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_equation

	return p
}

func (s *EquationContext) GetParser() antlr.Parser { return s.parser }

func (s *EquationContext) Simple_expression() ISimple_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_expressionContext)
}

func (s *EquationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *EquationContext) If_equation() IIf_equationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_equationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_equationContext)
}

func (s *EquationContext) For_equation() IFor_equationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_equationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_equationContext)
}

func (s *EquationContext) Connect_clause() IConnect_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConnect_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConnect_clauseContext)
}

func (s *EquationContext) When_equation() IWhen_equationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhen_equationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhen_equationContext)
}

func (s *EquationContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *EquationContext) Function_call_args() IFunction_call_argsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_argsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_argsContext)
}

func (s *EquationContext) String_comment() IString_commentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_commentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_commentContext)
}

func (s *EquationContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *EquationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EquationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *EquationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterEquation(s)
	}
}

func (s *EquationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitEquation(s)
	}
}




func (p *ModelicaParser) Equation() (localctx IEquationContext) {
	localctx = NewEquationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, ModelicaParserRULE_equation)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(626)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(615)
			p.Simple_expression()
		}
		{
			p.SetState(616)
			p.Match(ModelicaParserT__19)
		}
		{
			p.SetState(617)
			p.Expression()
		}


	case 2:
		{
			p.SetState(619)
			p.If_equation()
		}


	case 3:
		{
			p.SetState(620)
			p.For_equation()
		}


	case 4:
		{
			p.SetState(621)
			p.Connect_clause()
		}


	case 5:
		{
			p.SetState(622)
			p.When_equation()
		}


	case 6:
		{
			p.SetState(623)
			p.Name()
		}
		{
			p.SetState(624)
			p.Function_call_args()
		}

	}
	p.SetState(629)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserSTRING {
		{
			p.SetState(628)
			p.String_comment()
		}

	}
	p.SetState(632)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__87 {
		{
			p.SetState(631)
			p.Annotation()
		}

	}



	return localctx
}


// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) Component_reference() IComponent_referenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComponent_referenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComponent_referenceContext)
}

func (s *StatementContext) Output_expression_list() IOutput_expression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_expression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOutput_expression_listContext)
}

func (s *StatementContext) Function_call_args() IFunction_call_argsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_argsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_argsContext)
}

func (s *StatementContext) If_statement() IIf_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_statementContext)
}

func (s *StatementContext) For_statement() IFor_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_statementContext)
}

func (s *StatementContext) While_statement() IWhile_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhile_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhile_statementContext)
}

func (s *StatementContext) When_statement() IWhen_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhen_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhen_statementContext)
}

func (s *StatementContext) String_comment() IString_commentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_commentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_commentContext)
}

func (s *StatementContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *StatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitStatement(s)
	}
}




func (p *ModelicaParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, ModelicaParserRULE_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(653)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ModelicaParserT__86, ModelicaParserIDENT:
		{
			p.SetState(634)
			p.Component_reference()
		}
		p.SetState(638)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case ModelicaParserT__46:
			{
				p.SetState(635)
				p.Match(ModelicaParserT__46)
			}
			{
				p.SetState(636)
				p.Expression()
			}


		case ModelicaParserT__21:
			{
				p.SetState(637)
				p.Function_call_args()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case ModelicaParserT__21:
		{
			p.SetState(640)
			p.Match(ModelicaParserT__21)
		}
		{
			p.SetState(641)
			p.Output_expression_list()
		}
		{
			p.SetState(642)
			p.Match(ModelicaParserT__23)
		}
		{
			p.SetState(643)
			p.Match(ModelicaParserT__46)
		}
		{
			p.SetState(644)
			p.Component_reference()
		}
		{
			p.SetState(645)
			p.Function_call_args()
		}


	case ModelicaParserT__51:
		{
			p.SetState(647)
			p.Match(ModelicaParserT__51)
		}


	case ModelicaParserT__52:
		{
			p.SetState(648)
			p.Match(ModelicaParserT__52)
		}


	case ModelicaParserT__45:
		{
			p.SetState(649)
			p.If_statement()
		}


	case ModelicaParserT__56:
		{
			p.SetState(650)
			p.For_statement()
		}


	case ModelicaParserT__59:
		{
			p.SetState(651)
			p.While_statement()
		}


	case ModelicaParserT__60:
		{
			p.SetState(652)
			p.When_statement()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(656)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserSTRING {
		{
			p.SetState(655)
			p.String_comment()
		}

	}
	p.SetState(659)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__87 {
		{
			p.SetState(658)
			p.Annotation()
		}

	}



	return localctx
}


// IIf_equationContext is an interface to support dynamic dispatch.
type IIf_equationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_equationContext differentiates from other interfaces.
	IsIf_equationContext()
}

type If_equationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_equationContext() *If_equationContext {
	var p = new(If_equationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_if_equation
	return p
}

func (*If_equationContext) IsIf_equationContext() {}

func NewIf_equationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_equationContext {
	var p = new(If_equationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_if_equation

	return p
}

func (s *If_equationContext) GetParser() antlr.Parser { return s.parser }

func (s *If_equationContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *If_equationContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *If_equationContext) AllControl_structure_body() []IControl_structure_bodyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IControl_structure_bodyContext)(nil)).Elem())
	var tst = make([]IControl_structure_bodyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IControl_structure_bodyContext)
		}
	}

	return tst
}

func (s *If_equationContext) Control_structure_body(i int) IControl_structure_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_structure_bodyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IControl_structure_bodyContext)
}

func (s *If_equationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_equationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *If_equationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterIf_equation(s)
	}
}

func (s *If_equationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitIf_equation(s)
	}
}




func (p *ModelicaParser) If_equation() (localctx IIf_equationContext) {
	localctx = NewIf_equationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, ModelicaParserRULE_if_equation)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(661)
		p.Match(ModelicaParserT__45)
	}
	{
		p.SetState(662)
		p.Expression()
	}
	{
		p.SetState(663)
		p.Match(ModelicaParserT__53)
	}
	p.SetState(665)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 100, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(664)
			p.Control_structure_body()
		}


	}
	p.SetState(675)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ModelicaParserT__54 {
		{
			p.SetState(667)
			p.Match(ModelicaParserT__54)
		}
		{
			p.SetState(668)
			p.Expression()
		}
		{
			p.SetState(669)
			p.Match(ModelicaParserT__53)
		}
		p.SetState(671)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 101, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(670)
				p.Control_structure_body()
			}


		}


		p.SetState(677)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(682)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__55 {
		{
			p.SetState(678)
			p.Match(ModelicaParserT__55)
		}
		p.SetState(680)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 103, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(679)
				p.Control_structure_body()
			}


		}

	}
	{
		p.SetState(684)
		p.Match(ModelicaParserT__17)
	}
	{
		p.SetState(685)
		p.Match(ModelicaParserT__45)
	}



	return localctx
}


// IIf_statementContext is an interface to support dynamic dispatch.
type IIf_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_statementContext differentiates from other interfaces.
	IsIf_statementContext()
}

type If_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_statementContext() *If_statementContext {
	var p = new(If_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_if_statement
	return p
}

func (*If_statementContext) IsIf_statementContext() {}

func NewIf_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_statementContext {
	var p = new(If_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_if_statement

	return p
}

func (s *If_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *If_statementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *If_statementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *If_statementContext) AllControl_structure_body() []IControl_structure_bodyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IControl_structure_bodyContext)(nil)).Elem())
	var tst = make([]IControl_structure_bodyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IControl_structure_bodyContext)
		}
	}

	return tst
}

func (s *If_statementContext) Control_structure_body(i int) IControl_structure_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_structure_bodyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IControl_structure_bodyContext)
}

func (s *If_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *If_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterIf_statement(s)
	}
}

func (s *If_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitIf_statement(s)
	}
}




func (p *ModelicaParser) If_statement() (localctx IIf_statementContext) {
	localctx = NewIf_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, ModelicaParserRULE_if_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(687)
		p.Match(ModelicaParserT__45)
	}
	{
		p.SetState(688)
		p.Expression()
	}
	{
		p.SetState(689)
		p.Match(ModelicaParserT__53)
	}
	p.SetState(691)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 105, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(690)
			p.Control_structure_body()
		}


	}
	p.SetState(701)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ModelicaParserT__54 {
		{
			p.SetState(693)
			p.Match(ModelicaParserT__54)
		}
		{
			p.SetState(694)
			p.Expression()
		}
		{
			p.SetState(695)
			p.Match(ModelicaParserT__53)
		}
		p.SetState(697)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(696)
				p.Control_structure_body()
			}


		}


		p.SetState(703)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(708)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__55 {
		{
			p.SetState(704)
			p.Match(ModelicaParserT__55)
		}
		p.SetState(706)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 108, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(705)
				p.Control_structure_body()
			}


		}

	}
	{
		p.SetState(710)
		p.Match(ModelicaParserT__17)
	}
	{
		p.SetState(711)
		p.Match(ModelicaParserT__45)
	}



	return localctx
}


// IControl_structure_bodyContext is an interface to support dynamic dispatch.
type IControl_structure_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsControl_structure_bodyContext differentiates from other interfaces.
	IsControl_structure_bodyContext()
}

type Control_structure_bodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyControl_structure_bodyContext() *Control_structure_bodyContext {
	var p = new(Control_structure_bodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_control_structure_body
	return p
}

func (*Control_structure_bodyContext) IsControl_structure_bodyContext() {}

func NewControl_structure_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_structure_bodyContext {
	var p = new(Control_structure_bodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_control_structure_body

	return p
}

func (s *Control_structure_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_structure_bodyContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Control_structure_bodyContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Control_structure_bodyContext) AllEquation() []IEquationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEquationContext)(nil)).Elem())
	var tst = make([]IEquationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEquationContext)
		}
	}

	return tst
}

func (s *Control_structure_bodyContext) Equation(i int) IEquationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEquationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEquationContext)
}

func (s *Control_structure_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_structure_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Control_structure_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterControl_structure_body(s)
	}
}

func (s *Control_structure_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitControl_structure_body(s)
	}
}




func (p *ModelicaParser) Control_structure_body() (localctx IControl_structure_bodyContext) {
	localctx = NewControl_structure_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, ModelicaParserRULE_control_structure_body)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(727)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 112, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(716)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for ok := true; ok; ok = _la == ModelicaParserT__21 || ((((_la - 46)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 46))) & ((1 << (ModelicaParserT__45 - 46)) | (1 << (ModelicaParserT__51 - 46)) | (1 << (ModelicaParserT__52 - 46)) | (1 << (ModelicaParserT__56 - 46)) | (1 << (ModelicaParserT__59 - 46)) | (1 << (ModelicaParserT__60 - 46)))) != 0) || _la == ModelicaParserT__86 || _la == ModelicaParserIDENT {
			{
				p.SetState(713)
				p.Statement()
			}
			{
				p.SetState(714)
				p.Match(ModelicaParserT__1)
			}


			p.SetState(718)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(723)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
					{
						p.SetState(720)
						p.Equation()
					}
					{
						p.SetState(721)
						p.Match(ModelicaParserT__1)
					}




			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(725)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 111, p.GetParserRuleContext())
		}

	}


	return localctx
}


// IFor_equationContext is an interface to support dynamic dispatch.
type IFor_equationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFor_equationContext differentiates from other interfaces.
	IsFor_equationContext()
}

type For_equationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFor_equationContext() *For_equationContext {
	var p = new(For_equationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_for_equation
	return p
}

func (*For_equationContext) IsFor_equationContext() {}

func NewFor_equationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *For_equationContext {
	var p = new(For_equationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_for_equation

	return p
}

func (s *For_equationContext) GetParser() antlr.Parser { return s.parser }

func (s *For_equationContext) For_indices() IFor_indicesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_indicesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_indicesContext)
}

func (s *For_equationContext) Control_structure_body() IControl_structure_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_structure_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_structure_bodyContext)
}

func (s *For_equationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *For_equationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *For_equationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterFor_equation(s)
	}
}

func (s *For_equationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitFor_equation(s)
	}
}




func (p *ModelicaParser) For_equation() (localctx IFor_equationContext) {
	localctx = NewFor_equationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, ModelicaParserRULE_for_equation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(729)
		p.Match(ModelicaParserT__56)
	}
	{
		p.SetState(730)
		p.For_indices()
	}
	{
		p.SetState(731)
		p.Match(ModelicaParserT__57)
	}
	p.SetState(733)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 113, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(732)
			p.Control_structure_body()
		}


	}
	{
		p.SetState(735)
		p.Match(ModelicaParserT__17)
	}
	{
		p.SetState(736)
		p.Match(ModelicaParserT__56)
	}



	return localctx
}


// IFor_statementContext is an interface to support dynamic dispatch.
type IFor_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFor_statementContext differentiates from other interfaces.
	IsFor_statementContext()
}

type For_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFor_statementContext() *For_statementContext {
	var p = new(For_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_for_statement
	return p
}

func (*For_statementContext) IsFor_statementContext() {}

func NewFor_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *For_statementContext {
	var p = new(For_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_for_statement

	return p
}

func (s *For_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *For_statementContext) For_indices() IFor_indicesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_indicesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_indicesContext)
}

func (s *For_statementContext) Control_structure_body() IControl_structure_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_structure_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_structure_bodyContext)
}

func (s *For_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *For_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *For_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterFor_statement(s)
	}
}

func (s *For_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitFor_statement(s)
	}
}




func (p *ModelicaParser) For_statement() (localctx IFor_statementContext) {
	localctx = NewFor_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, ModelicaParserRULE_for_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(738)
		p.Match(ModelicaParserT__56)
	}
	{
		p.SetState(739)
		p.For_indices()
	}
	{
		p.SetState(740)
		p.Match(ModelicaParserT__57)
	}
	p.SetState(742)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(741)
			p.Control_structure_body()
		}


	}
	{
		p.SetState(744)
		p.Match(ModelicaParserT__17)
	}
	{
		p.SetState(745)
		p.Match(ModelicaParserT__56)
	}



	return localctx
}


// IFor_indicesContext is an interface to support dynamic dispatch.
type IFor_indicesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFor_indicesContext differentiates from other interfaces.
	IsFor_indicesContext()
}

type For_indicesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFor_indicesContext() *For_indicesContext {
	var p = new(For_indicesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_for_indices
	return p
}

func (*For_indicesContext) IsFor_indicesContext() {}

func NewFor_indicesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *For_indicesContext {
	var p = new(For_indicesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_for_indices

	return p
}

func (s *For_indicesContext) GetParser() antlr.Parser { return s.parser }

func (s *For_indicesContext) AllFor_index() []IFor_indexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFor_indexContext)(nil)).Elem())
	var tst = make([]IFor_indexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFor_indexContext)
		}
	}

	return tst
}

func (s *For_indicesContext) For_index(i int) IFor_indexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_indexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFor_indexContext)
}

func (s *For_indicesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *For_indicesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *For_indicesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterFor_indices(s)
	}
}

func (s *For_indicesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitFor_indices(s)
	}
}




func (p *ModelicaParser) For_indices() (localctx IFor_indicesContext) {
	localctx = NewFor_indicesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, ModelicaParserRULE_for_indices)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(747)
		p.For_index()
	}
	p.SetState(752)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ModelicaParserT__25 {
		{
			p.SetState(748)
			p.Match(ModelicaParserT__25)
		}
		{
			p.SetState(749)
			p.For_index()
		}


		p.SetState(754)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IFor_indexContext is an interface to support dynamic dispatch.
type IFor_indexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFor_indexContext differentiates from other interfaces.
	IsFor_indexContext()
}

type For_indexContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFor_indexContext() *For_indexContext {
	var p = new(For_indexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_for_index
	return p
}

func (*For_indexContext) IsFor_indexContext() {}

func NewFor_indexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *For_indexContext {
	var p = new(For_indexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_for_index

	return p
}

func (s *For_indexContext) GetParser() antlr.Parser { return s.parser }

func (s *For_indexContext) IDENT() antlr.TerminalNode {
	return s.GetToken(ModelicaParserIDENT, 0)
}

func (s *For_indexContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *For_indexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *For_indexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *For_indexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterFor_index(s)
	}
}

func (s *For_indexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitFor_index(s)
	}
}




func (p *ModelicaParser) For_index() (localctx IFor_indexContext) {
	localctx = NewFor_indexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, ModelicaParserRULE_for_index)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(755)
		p.Match(ModelicaParserIDENT)
	}
	p.SetState(758)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__58 {
		{
			p.SetState(756)
			p.Match(ModelicaParserT__58)
		}
		{
			p.SetState(757)
			p.Expression()
		}

	}



	return localctx
}


// IWhile_statementContext is an interface to support dynamic dispatch.
type IWhile_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhile_statementContext differentiates from other interfaces.
	IsWhile_statementContext()
}

type While_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhile_statementContext() *While_statementContext {
	var p = new(While_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_while_statement
	return p
}

func (*While_statementContext) IsWhile_statementContext() {}

func NewWhile_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *While_statementContext {
	var p = new(While_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_while_statement

	return p
}

func (s *While_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *While_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *While_statementContext) Control_structure_body() IControl_structure_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_structure_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_structure_bodyContext)
}

func (s *While_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *While_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *While_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterWhile_statement(s)
	}
}

func (s *While_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitWhile_statement(s)
	}
}




func (p *ModelicaParser) While_statement() (localctx IWhile_statementContext) {
	localctx = NewWhile_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, ModelicaParserRULE_while_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(760)
		p.Match(ModelicaParserT__59)
	}
	{
		p.SetState(761)
		p.Expression()
	}
	{
		p.SetState(762)
		p.Match(ModelicaParserT__57)
	}
	p.SetState(764)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 117, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(763)
			p.Control_structure_body()
		}


	}
	{
		p.SetState(766)
		p.Match(ModelicaParserT__17)
	}
	{
		p.SetState(767)
		p.Match(ModelicaParserT__59)
	}



	return localctx
}


// IWhen_equationContext is an interface to support dynamic dispatch.
type IWhen_equationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhen_equationContext differentiates from other interfaces.
	IsWhen_equationContext()
}

type When_equationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhen_equationContext() *When_equationContext {
	var p = new(When_equationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_when_equation
	return p
}

func (*When_equationContext) IsWhen_equationContext() {}

func NewWhen_equationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *When_equationContext {
	var p = new(When_equationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_when_equation

	return p
}

func (s *When_equationContext) GetParser() antlr.Parser { return s.parser }

func (s *When_equationContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *When_equationContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *When_equationContext) AllControl_structure_body() []IControl_structure_bodyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IControl_structure_bodyContext)(nil)).Elem())
	var tst = make([]IControl_structure_bodyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IControl_structure_bodyContext)
		}
	}

	return tst
}

func (s *When_equationContext) Control_structure_body(i int) IControl_structure_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_structure_bodyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IControl_structure_bodyContext)
}

func (s *When_equationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *When_equationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *When_equationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterWhen_equation(s)
	}
}

func (s *When_equationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitWhen_equation(s)
	}
}




func (p *ModelicaParser) When_equation() (localctx IWhen_equationContext) {
	localctx = NewWhen_equationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, ModelicaParserRULE_when_equation)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(769)
		p.Match(ModelicaParserT__60)
	}
	{
		p.SetState(770)
		p.Expression()
	}
	{
		p.SetState(771)
		p.Match(ModelicaParserT__53)
	}
	p.SetState(773)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(772)
			p.Control_structure_body()
		}


	}
	p.SetState(783)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ModelicaParserT__61 {
		{
			p.SetState(775)
			p.Match(ModelicaParserT__61)
		}
		{
			p.SetState(776)
			p.Expression()
		}
		{
			p.SetState(777)
			p.Match(ModelicaParserT__53)
		}
		p.SetState(779)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(778)
				p.Control_structure_body()
			}


		}


		p.SetState(785)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(786)
		p.Match(ModelicaParserT__17)
	}
	{
		p.SetState(787)
		p.Match(ModelicaParserT__60)
	}



	return localctx
}


// IWhen_statementContext is an interface to support dynamic dispatch.
type IWhen_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhen_statementContext differentiates from other interfaces.
	IsWhen_statementContext()
}

type When_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhen_statementContext() *When_statementContext {
	var p = new(When_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_when_statement
	return p
}

func (*When_statementContext) IsWhen_statementContext() {}

func NewWhen_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *When_statementContext {
	var p = new(When_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_when_statement

	return p
}

func (s *When_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *When_statementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *When_statementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *When_statementContext) AllControl_structure_body() []IControl_structure_bodyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IControl_structure_bodyContext)(nil)).Elem())
	var tst = make([]IControl_structure_bodyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IControl_structure_bodyContext)
		}
	}

	return tst
}

func (s *When_statementContext) Control_structure_body(i int) IControl_structure_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_structure_bodyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IControl_structure_bodyContext)
}

func (s *When_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *When_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *When_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterWhen_statement(s)
	}
}

func (s *When_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitWhen_statement(s)
	}
}




func (p *ModelicaParser) When_statement() (localctx IWhen_statementContext) {
	localctx = NewWhen_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, ModelicaParserRULE_when_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(789)
		p.Match(ModelicaParserT__60)
	}
	{
		p.SetState(790)
		p.Expression()
	}
	{
		p.SetState(791)
		p.Match(ModelicaParserT__53)
	}
	p.SetState(793)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 121, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(792)
			p.Control_structure_body()
		}


	}
	p.SetState(803)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ModelicaParserT__61 {
		{
			p.SetState(795)
			p.Match(ModelicaParserT__61)
		}
		{
			p.SetState(796)
			p.Expression()
		}
		{
			p.SetState(797)
			p.Match(ModelicaParserT__53)
		}
		p.SetState(799)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(798)
				p.Control_structure_body()
			}


		}


		p.SetState(805)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(806)
		p.Match(ModelicaParserT__17)
	}
	{
		p.SetState(807)
		p.Match(ModelicaParserT__60)
	}



	return localctx
}


// IConnect_clauseContext is an interface to support dynamic dispatch.
type IConnect_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConnect_clauseContext differentiates from other interfaces.
	IsConnect_clauseContext()
}

type Connect_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConnect_clauseContext() *Connect_clauseContext {
	var p = new(Connect_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_connect_clause
	return p
}

func (*Connect_clauseContext) IsConnect_clauseContext() {}

func NewConnect_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Connect_clauseContext {
	var p = new(Connect_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_connect_clause

	return p
}

func (s *Connect_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Connect_clauseContext) AllComponent_reference() []IComponent_referenceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IComponent_referenceContext)(nil)).Elem())
	var tst = make([]IComponent_referenceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IComponent_referenceContext)
		}
	}

	return tst
}

func (s *Connect_clauseContext) Component_reference(i int) IComponent_referenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComponent_referenceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IComponent_referenceContext)
}

func (s *Connect_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Connect_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Connect_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterConnect_clause(s)
	}
}

func (s *Connect_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitConnect_clause(s)
	}
}




func (p *ModelicaParser) Connect_clause() (localctx IConnect_clauseContext) {
	localctx = NewConnect_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, ModelicaParserRULE_connect_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(809)
		p.Match(ModelicaParserT__62)
	}
	{
		p.SetState(810)
		p.Match(ModelicaParserT__21)
	}
	{
		p.SetState(811)
		p.Component_reference()
	}
	{
		p.SetState(812)
		p.Match(ModelicaParserT__25)
	}
	{
		p.SetState(813)
		p.Component_reference()
	}
	{
		p.SetState(814)
		p.Match(ModelicaParserT__23)
	}



	return localctx
}


// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) Simple_expression() ISimple_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_expressionContext)
}

func (s *ExpressionContext) If_expression_condition() IIf_expression_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_expression_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_expression_conditionContext)
}

func (s *ExpressionContext) Else_expression_condition() IElse_expression_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElse_expression_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElse_expression_conditionContext)
}

func (s *ExpressionContext) AllElseif_expression_condition() []IElseif_expression_conditionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IElseif_expression_conditionContext)(nil)).Elem())
	var tst = make([]IElseif_expression_conditionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IElseif_expression_conditionContext)
		}
	}

	return tst
}

func (s *ExpressionContext) Elseif_expression_condition(i int) IElseif_expression_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElseif_expression_conditionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IElseif_expression_conditionContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitExpression(s)
	}
}




func (p *ModelicaParser) Expression() (localctx IExpressionContext) {
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, ModelicaParserRULE_expression)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(826)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ModelicaParserT__17, ModelicaParserT__21, ModelicaParserT__24, ModelicaParserT__48, ModelicaParserT__65, ModelicaParserT__72, ModelicaParserT__73, ModelicaParserT__74, ModelicaParserT__75, ModelicaParserT__81, ModelicaParserT__82, ModelicaParserT__83, ModelicaParserT__85, ModelicaParserT__86, ModelicaParserIDENT, ModelicaParserSTRING, ModelicaParserUNSIGNED_NUMBER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(816)
			p.Simple_expression()
		}


	case ModelicaParserT__45:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(817)
			p.If_expression_condition()
		}
		p.SetState(821)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == ModelicaParserT__54 {
			{
				p.SetState(818)
				p.Elseif_expression_condition()
			}


			p.SetState(823)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(824)
			p.Else_expression_condition()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ISimple_expressionContext is an interface to support dynamic dispatch.
type ISimple_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimple_expressionContext differentiates from other interfaces.
	IsSimple_expressionContext()
}

type Simple_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_expressionContext() *Simple_expressionContext {
	var p = new(Simple_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_simple_expression
	return p
}

func (*Simple_expressionContext) IsSimple_expressionContext() {}

func NewSimple_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_expressionContext {
	var p = new(Simple_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_simple_expression

	return p
}

func (s *Simple_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_expressionContext) AllLogical_expression() []ILogical_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILogical_expressionContext)(nil)).Elem())
	var tst = make([]ILogical_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILogical_expressionContext)
		}
	}

	return tst
}

func (s *Simple_expressionContext) Logical_expression(i int) ILogical_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogical_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILogical_expressionContext)
}

func (s *Simple_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Simple_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterSimple_expression(s)
	}
}

func (s *Simple_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitSimple_expression(s)
	}
}




func (p *ModelicaParser) Simple_expression() (localctx ISimple_expressionContext) {
	localctx = NewSimple_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, ModelicaParserRULE_simple_expression)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(828)
		p.Logical_expression()
	}
	p.SetState(835)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__22 {
		{
			p.SetState(829)
			p.Match(ModelicaParserT__22)
		}
		{
			p.SetState(830)
			p.Logical_expression()
		}
		p.SetState(833)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserT__22 {
			{
				p.SetState(831)
				p.Match(ModelicaParserT__22)
			}
			{
				p.SetState(832)
				p.Logical_expression()
			}

		}

	}



	return localctx
}


// IIf_expression_bodyContext is an interface to support dynamic dispatch.
type IIf_expression_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_expression_bodyContext differentiates from other interfaces.
	IsIf_expression_bodyContext()
}

type If_expression_bodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_expression_bodyContext() *If_expression_bodyContext {
	var p = new(If_expression_bodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_if_expression_body
	return p
}

func (*If_expression_bodyContext) IsIf_expression_bodyContext() {}

func NewIf_expression_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_expression_bodyContext {
	var p = new(If_expression_bodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_if_expression_body

	return p
}

func (s *If_expression_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *If_expression_bodyContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *If_expression_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_expression_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *If_expression_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterIf_expression_body(s)
	}
}

func (s *If_expression_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitIf_expression_body(s)
	}
}




func (p *ModelicaParser) If_expression_body() (localctx IIf_expression_bodyContext) {
	localctx = NewIf_expression_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, ModelicaParserRULE_if_expression_body)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(837)
		p.Expression()
	}



	return localctx
}


// IIf_expression_conditionContext is an interface to support dynamic dispatch.
type IIf_expression_conditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_expression_conditionContext differentiates from other interfaces.
	IsIf_expression_conditionContext()
}

type If_expression_conditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_expression_conditionContext() *If_expression_conditionContext {
	var p = new(If_expression_conditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_if_expression_condition
	return p
}

func (*If_expression_conditionContext) IsIf_expression_conditionContext() {}

func NewIf_expression_conditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_expression_conditionContext {
	var p = new(If_expression_conditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_if_expression_condition

	return p
}

func (s *If_expression_conditionContext) GetParser() antlr.Parser { return s.parser }

func (s *If_expression_conditionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *If_expression_conditionContext) If_expression_body() IIf_expression_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_expression_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_expression_bodyContext)
}

func (s *If_expression_conditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_expression_conditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *If_expression_conditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterIf_expression_condition(s)
	}
}

func (s *If_expression_conditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitIf_expression_condition(s)
	}
}




func (p *ModelicaParser) If_expression_condition() (localctx IIf_expression_conditionContext) {
	localctx = NewIf_expression_conditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, ModelicaParserRULE_if_expression_condition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(839)
		p.Match(ModelicaParserT__45)
	}
	{
		p.SetState(840)
		p.Expression()
	}
	{
		p.SetState(841)
		p.Match(ModelicaParserT__53)
	}
	{
		p.SetState(842)
		p.If_expression_body()
	}



	return localctx
}


// IElseif_expression_conditionContext is an interface to support dynamic dispatch.
type IElseif_expression_conditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElseif_expression_conditionContext differentiates from other interfaces.
	IsElseif_expression_conditionContext()
}

type Elseif_expression_conditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElseif_expression_conditionContext() *Elseif_expression_conditionContext {
	var p = new(Elseif_expression_conditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_elseif_expression_condition
	return p
}

func (*Elseif_expression_conditionContext) IsElseif_expression_conditionContext() {}

func NewElseif_expression_conditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Elseif_expression_conditionContext {
	var p = new(Elseif_expression_conditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_elseif_expression_condition

	return p
}

func (s *Elseif_expression_conditionContext) GetParser() antlr.Parser { return s.parser }

func (s *Elseif_expression_conditionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Elseif_expression_conditionContext) If_expression_body() IIf_expression_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_expression_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_expression_bodyContext)
}

func (s *Elseif_expression_conditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Elseif_expression_conditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Elseif_expression_conditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterElseif_expression_condition(s)
	}
}

func (s *Elseif_expression_conditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitElseif_expression_condition(s)
	}
}




func (p *ModelicaParser) Elseif_expression_condition() (localctx IElseif_expression_conditionContext) {
	localctx = NewElseif_expression_conditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, ModelicaParserRULE_elseif_expression_condition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(844)
		p.Match(ModelicaParserT__54)
	}
	{
		p.SetState(845)
		p.Expression()
	}
	{
		p.SetState(846)
		p.Match(ModelicaParserT__53)
	}
	{
		p.SetState(847)
		p.If_expression_body()
	}



	return localctx
}


// IElse_expression_conditionContext is an interface to support dynamic dispatch.
type IElse_expression_conditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElse_expression_conditionContext differentiates from other interfaces.
	IsElse_expression_conditionContext()
}

type Else_expression_conditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElse_expression_conditionContext() *Else_expression_conditionContext {
	var p = new(Else_expression_conditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_else_expression_condition
	return p
}

func (*Else_expression_conditionContext) IsElse_expression_conditionContext() {}

func NewElse_expression_conditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Else_expression_conditionContext {
	var p = new(Else_expression_conditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_else_expression_condition

	return p
}

func (s *Else_expression_conditionContext) GetParser() antlr.Parser { return s.parser }

func (s *Else_expression_conditionContext) If_expression_body() IIf_expression_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_expression_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_expression_bodyContext)
}

func (s *Else_expression_conditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Else_expression_conditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Else_expression_conditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterElse_expression_condition(s)
	}
}

func (s *Else_expression_conditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitElse_expression_condition(s)
	}
}




func (p *ModelicaParser) Else_expression_condition() (localctx IElse_expression_conditionContext) {
	localctx = NewElse_expression_conditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, ModelicaParserRULE_else_expression_condition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(849)
		p.Match(ModelicaParserT__55)
	}
	{
		p.SetState(850)
		p.If_expression_body()
	}



	return localctx
}


// ILogical_expressionContext is an interface to support dynamic dispatch.
type ILogical_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogical_expressionContext differentiates from other interfaces.
	IsLogical_expressionContext()
}

type Logical_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogical_expressionContext() *Logical_expressionContext {
	var p = new(Logical_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_logical_expression
	return p
}

func (*Logical_expressionContext) IsLogical_expressionContext() {}

func NewLogical_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Logical_expressionContext {
	var p = new(Logical_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_logical_expression

	return p
}

func (s *Logical_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Logical_expressionContext) AllLogical_term() []ILogical_termContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILogical_termContext)(nil)).Elem())
	var tst = make([]ILogical_termContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILogical_termContext)
		}
	}

	return tst
}

func (s *Logical_expressionContext) Logical_term(i int) ILogical_termContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogical_termContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILogical_termContext)
}

func (s *Logical_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Logical_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Logical_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterLogical_expression(s)
	}
}

func (s *Logical_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitLogical_expression(s)
	}
}




func (p *ModelicaParser) Logical_expression() (localctx ILogical_expressionContext) {
	localctx = NewLogical_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, ModelicaParserRULE_logical_expression)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(852)
		p.Logical_term()
	}
	p.SetState(857)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ModelicaParserT__63 {
		{
			p.SetState(853)
			p.Match(ModelicaParserT__63)
		}
		{
			p.SetState(854)
			p.Logical_term()
		}


		p.SetState(859)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ILogical_termContext is an interface to support dynamic dispatch.
type ILogical_termContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogical_termContext differentiates from other interfaces.
	IsLogical_termContext()
}

type Logical_termContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogical_termContext() *Logical_termContext {
	var p = new(Logical_termContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_logical_term
	return p
}

func (*Logical_termContext) IsLogical_termContext() {}

func NewLogical_termContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Logical_termContext {
	var p = new(Logical_termContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_logical_term

	return p
}

func (s *Logical_termContext) GetParser() antlr.Parser { return s.parser }

func (s *Logical_termContext) AllLogical_factor() []ILogical_factorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILogical_factorContext)(nil)).Elem())
	var tst = make([]ILogical_factorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILogical_factorContext)
		}
	}

	return tst
}

func (s *Logical_termContext) Logical_factor(i int) ILogical_factorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogical_factorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILogical_factorContext)
}

func (s *Logical_termContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Logical_termContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Logical_termContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterLogical_term(s)
	}
}

func (s *Logical_termContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitLogical_term(s)
	}
}




func (p *ModelicaParser) Logical_term() (localctx ILogical_termContext) {
	localctx = NewLogical_termContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, ModelicaParserRULE_logical_term)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(860)
		p.Logical_factor()
	}
	p.SetState(865)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ModelicaParserT__64 {
		{
			p.SetState(861)
			p.Match(ModelicaParserT__64)
		}
		{
			p.SetState(862)
			p.Logical_factor()
		}


		p.SetState(867)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ILogical_factorContext is an interface to support dynamic dispatch.
type ILogical_factorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogical_factorContext differentiates from other interfaces.
	IsLogical_factorContext()
}

type Logical_factorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogical_factorContext() *Logical_factorContext {
	var p = new(Logical_factorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_logical_factor
	return p
}

func (*Logical_factorContext) IsLogical_factorContext() {}

func NewLogical_factorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Logical_factorContext {
	var p = new(Logical_factorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_logical_factor

	return p
}

func (s *Logical_factorContext) GetParser() antlr.Parser { return s.parser }

func (s *Logical_factorContext) Relation() IRelationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationContext)
}

func (s *Logical_factorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Logical_factorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Logical_factorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterLogical_factor(s)
	}
}

func (s *Logical_factorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitLogical_factor(s)
	}
}




func (p *ModelicaParser) Logical_factor() (localctx ILogical_factorContext) {
	localctx = NewLogical_factorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, ModelicaParserRULE_logical_factor)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(869)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__65 {
		{
			p.SetState(868)
			p.Match(ModelicaParserT__65)
		}

	}
	{
		p.SetState(871)
		p.Relation()
	}



	return localctx
}


// IRelationContext is an interface to support dynamic dispatch.
type IRelationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelationContext differentiates from other interfaces.
	IsRelationContext()
}

type RelationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationContext() *RelationContext {
	var p = new(RelationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_relation
	return p
}

func (*RelationContext) IsRelationContext() {}

func NewRelationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationContext {
	var p = new(RelationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_relation

	return p
}

func (s *RelationContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationContext) AllArithmetic_expression() []IArithmetic_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IArithmetic_expressionContext)(nil)).Elem())
	var tst = make([]IArithmetic_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IArithmetic_expressionContext)
		}
	}

	return tst
}

func (s *RelationContext) Arithmetic_expression(i int) IArithmetic_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArithmetic_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IArithmetic_expressionContext)
}

func (s *RelationContext) Rel_op() IRel_opContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRel_opContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRel_opContext)
}

func (s *RelationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *RelationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterRelation(s)
	}
}

func (s *RelationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitRelation(s)
	}
}




func (p *ModelicaParser) Relation() (localctx IRelationContext) {
	localctx = NewRelationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, ModelicaParserRULE_relation)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(873)
		p.Arithmetic_expression()
	}
	p.SetState(877)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if ((((_la - 67)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 67))) & ((1 << (ModelicaParserT__66 - 67)) | (1 << (ModelicaParserT__67 - 67)) | (1 << (ModelicaParserT__68 - 67)) | (1 << (ModelicaParserT__69 - 67)) | (1 << (ModelicaParserT__70 - 67)) | (1 << (ModelicaParserT__71 - 67)))) != 0) {
		{
			p.SetState(874)
			p.Rel_op()
		}
		{
			p.SetState(875)
			p.Arithmetic_expression()
		}

	}



	return localctx
}


// IRel_opContext is an interface to support dynamic dispatch.
type IRel_opContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRel_opContext differentiates from other interfaces.
	IsRel_opContext()
}

type Rel_opContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRel_opContext() *Rel_opContext {
	var p = new(Rel_opContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_rel_op
	return p
}

func (*Rel_opContext) IsRel_opContext() {}

func NewRel_opContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rel_opContext {
	var p = new(Rel_opContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_rel_op

	return p
}

func (s *Rel_opContext) GetParser() antlr.Parser { return s.parser }
func (s *Rel_opContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rel_opContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Rel_opContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterRel_op(s)
	}
}

func (s *Rel_opContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitRel_op(s)
	}
}




func (p *ModelicaParser) Rel_op() (localctx IRel_opContext) {
	localctx = NewRel_opContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, ModelicaParserRULE_rel_op)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(879)
		_la = p.GetTokenStream().LA(1)

		if !(((((_la - 67)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 67))) & ((1 << (ModelicaParserT__66 - 67)) | (1 << (ModelicaParserT__67 - 67)) | (1 << (ModelicaParserT__68 - 67)) | (1 << (ModelicaParserT__69 - 67)) | (1 << (ModelicaParserT__70 - 67)) | (1 << (ModelicaParserT__71 - 67)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IArithmetic_expressionContext is an interface to support dynamic dispatch.
type IArithmetic_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArithmetic_expressionContext differentiates from other interfaces.
	IsArithmetic_expressionContext()
}

type Arithmetic_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArithmetic_expressionContext() *Arithmetic_expressionContext {
	var p = new(Arithmetic_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_arithmetic_expression
	return p
}

func (*Arithmetic_expressionContext) IsArithmetic_expressionContext() {}

func NewArithmetic_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Arithmetic_expressionContext {
	var p = new(Arithmetic_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_arithmetic_expression

	return p
}

func (s *Arithmetic_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Arithmetic_expressionContext) AllTerm() []ITermContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITermContext)(nil)).Elem())
	var tst = make([]ITermContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITermContext)
		}
	}

	return tst
}

func (s *Arithmetic_expressionContext) Term(i int) ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *Arithmetic_expressionContext) AllAdd_op() []IAdd_opContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAdd_opContext)(nil)).Elem())
	var tst = make([]IAdd_opContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAdd_opContext)
		}
	}

	return tst
}

func (s *Arithmetic_expressionContext) Add_op(i int) IAdd_opContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdd_opContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAdd_opContext)
}

func (s *Arithmetic_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Arithmetic_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Arithmetic_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterArithmetic_expression(s)
	}
}

func (s *Arithmetic_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitArithmetic_expression(s)
	}
}




func (p *ModelicaParser) Arithmetic_expression() (localctx IArithmetic_expressionContext) {
	localctx = NewArithmetic_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, ModelicaParserRULE_arithmetic_expression)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(882)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if ((((_la - 73)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 73))) & ((1 << (ModelicaParserT__72 - 73)) | (1 << (ModelicaParserT__73 - 73)) | (1 << (ModelicaParserT__74 - 73)) | (1 << (ModelicaParserT__75 - 73)))) != 0) {
		{
			p.SetState(881)
			p.Add_op()
		}

	}
	{
		p.SetState(884)
		p.Term()
	}
	p.SetState(890)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for ((((_la - 73)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 73))) & ((1 << (ModelicaParserT__72 - 73)) | (1 << (ModelicaParserT__73 - 73)) | (1 << (ModelicaParserT__74 - 73)) | (1 << (ModelicaParserT__75 - 73)))) != 0) {
		{
			p.SetState(885)
			p.Add_op()
		}
		{
			p.SetState(886)
			p.Term()
		}


		p.SetState(892)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IAdd_opContext is an interface to support dynamic dispatch.
type IAdd_opContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdd_opContext differentiates from other interfaces.
	IsAdd_opContext()
}

type Add_opContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdd_opContext() *Add_opContext {
	var p = new(Add_opContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_add_op
	return p
}

func (*Add_opContext) IsAdd_opContext() {}

func NewAdd_opContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Add_opContext {
	var p = new(Add_opContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_add_op

	return p
}

func (s *Add_opContext) GetParser() antlr.Parser { return s.parser }
func (s *Add_opContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Add_opContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Add_opContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterAdd_op(s)
	}
}

func (s *Add_opContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitAdd_op(s)
	}
}




func (p *ModelicaParser) Add_op() (localctx IAdd_opContext) {
	localctx = NewAdd_opContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, ModelicaParserRULE_add_op)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(893)
		_la = p.GetTokenStream().LA(1)

		if !(((((_la - 73)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 73))) & ((1 << (ModelicaParserT__72 - 73)) | (1 << (ModelicaParserT__73 - 73)) | (1 << (ModelicaParserT__74 - 73)) | (1 << (ModelicaParserT__75 - 73)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ITermContext is an interface to support dynamic dispatch.
type ITermContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTermContext differentiates from other interfaces.
	IsTermContext()
}

type TermContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTermContext() *TermContext {
	var p = new(TermContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_term
	return p
}

func (*TermContext) IsTermContext() {}

func NewTermContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TermContext {
	var p = new(TermContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_term

	return p
}

func (s *TermContext) GetParser() antlr.Parser { return s.parser }

func (s *TermContext) AllFactor() []IFactorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFactorContext)(nil)).Elem())
	var tst = make([]IFactorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFactorContext)
		}
	}

	return tst
}

func (s *TermContext) Factor(i int) IFactorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFactorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFactorContext)
}

func (s *TermContext) AllMul_op() []IMul_opContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMul_opContext)(nil)).Elem())
	var tst = make([]IMul_opContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMul_opContext)
		}
	}

	return tst
}

func (s *TermContext) Mul_op(i int) IMul_opContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMul_opContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMul_opContext)
}

func (s *TermContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TermContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TermContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterTerm(s)
	}
}

func (s *TermContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitTerm(s)
	}
}




func (p *ModelicaParser) Term() (localctx ITermContext) {
	localctx = NewTermContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, ModelicaParserRULE_term)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(895)
		p.Factor()
	}
	p.SetState(901)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ModelicaParserT__34 || ((((_la - 77)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 77))) & ((1 << (ModelicaParserT__76 - 77)) | (1 << (ModelicaParserT__77 - 77)) | (1 << (ModelicaParserT__78 - 77)))) != 0) {
		{
			p.SetState(896)
			p.Mul_op()
		}
		{
			p.SetState(897)
			p.Factor()
		}


		p.SetState(903)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IMul_opContext is an interface to support dynamic dispatch.
type IMul_opContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMul_opContext differentiates from other interfaces.
	IsMul_opContext()
}

type Mul_opContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMul_opContext() *Mul_opContext {
	var p = new(Mul_opContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_mul_op
	return p
}

func (*Mul_opContext) IsMul_opContext() {}

func NewMul_opContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Mul_opContext {
	var p = new(Mul_opContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_mul_op

	return p
}

func (s *Mul_opContext) GetParser() antlr.Parser { return s.parser }
func (s *Mul_opContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Mul_opContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Mul_opContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterMul_op(s)
	}
}

func (s *Mul_opContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitMul_op(s)
	}
}




func (p *ModelicaParser) Mul_op() (localctx IMul_opContext) {
	localctx = NewMul_opContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, ModelicaParserRULE_mul_op)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(904)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ModelicaParserT__34 || ((((_la - 77)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 77))) & ((1 << (ModelicaParserT__76 - 77)) | (1 << (ModelicaParserT__77 - 77)) | (1 << (ModelicaParserT__78 - 77)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IFactorContext is an interface to support dynamic dispatch.
type IFactorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFactorContext differentiates from other interfaces.
	IsFactorContext()
}

type FactorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFactorContext() *FactorContext {
	var p = new(FactorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_factor
	return p
}

func (*FactorContext) IsFactorContext() {}

func NewFactorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FactorContext {
	var p = new(FactorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_factor

	return p
}

func (s *FactorContext) GetParser() antlr.Parser { return s.parser }

func (s *FactorContext) AllPrimary() []IPrimaryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPrimaryContext)(nil)).Elem())
	var tst = make([]IPrimaryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPrimaryContext)
		}
	}

	return tst
}

func (s *FactorContext) Primary(i int) IPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *FactorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FactorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *FactorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterFactor(s)
	}
}

func (s *FactorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitFactor(s)
	}
}




func (p *ModelicaParser) Factor() (localctx IFactorContext) {
	localctx = NewFactorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, ModelicaParserRULE_factor)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(906)
		p.Primary()
	}
	p.SetState(909)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__79 || _la == ModelicaParserT__80 {
		{
			p.SetState(907)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ModelicaParserT__79 || _la == ModelicaParserT__80) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(908)
			p.Primary()
		}

	}



	return localctx
}


// IPrimaryContext is an interface to support dynamic dispatch.
type IPrimaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryContext differentiates from other interfaces.
	IsPrimaryContext()
}

type PrimaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryContext() *PrimaryContext {
	var p = new(PrimaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_primary
	return p
}

func (*PrimaryContext) IsPrimaryContext() {}

func NewPrimaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryContext {
	var p = new(PrimaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_primary

	return p
}

func (s *PrimaryContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryContext) UNSIGNED_NUMBER() antlr.TerminalNode {
	return s.GetToken(ModelicaParserUNSIGNED_NUMBER, 0)
}

func (s *PrimaryContext) STRING() antlr.TerminalNode {
	return s.GetToken(ModelicaParserSTRING, 0)
}

func (s *PrimaryContext) Function_call_args() IFunction_call_argsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_argsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_argsContext)
}

func (s *PrimaryContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *PrimaryContext) Component_reference() IComponent_referenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComponent_referenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComponent_referenceContext)
}

func (s *PrimaryContext) Output_expression_list() IOutput_expression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_expression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOutput_expression_listContext)
}

func (s *PrimaryContext) AllExpression_list() []IExpression_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_listContext)(nil)).Elem())
	var tst = make([]IExpression_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_listContext)
		}
	}

	return tst
}

func (s *PrimaryContext) Expression_list(i int) IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *PrimaryContext) Vector() IVectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVectorContext)
}

func (s *PrimaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PrimaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterPrimary(s)
	}
}

func (s *PrimaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitPrimary(s)
	}
}




func (p *ModelicaParser) Primary() (localctx IPrimaryContext) {
	localctx = NewPrimaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, ModelicaParserRULE_primary)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(939)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(911)
			p.Match(ModelicaParserUNSIGNED_NUMBER)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(912)
			p.Match(ModelicaParserSTRING)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(913)
			p.Match(ModelicaParserT__81)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(914)
			p.Match(ModelicaParserT__82)
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(918)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case ModelicaParserT__86, ModelicaParserIDENT:
			{
				p.SetState(915)
				p.Name()
			}


		case ModelicaParserT__24:
			{
				p.SetState(916)
				p.Match(ModelicaParserT__24)
			}


		case ModelicaParserT__48:
			{
				p.SetState(917)
				p.Match(ModelicaParserT__48)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(920)
			p.Function_call_args()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(921)
			p.Component_reference()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(922)
			p.Match(ModelicaParserT__21)
		}
		{
			p.SetState(923)
			p.Output_expression_list()
		}
		{
			p.SetState(924)
			p.Match(ModelicaParserT__23)
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(926)
			p.Match(ModelicaParserT__83)
		}
		{
			p.SetState(927)
			p.Expression_list()
		}
		p.SetState(932)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == ModelicaParserT__1 {
			{
				p.SetState(928)
				p.Match(ModelicaParserT__1)
			}
			{
				p.SetState(929)
				p.Expression_list()
			}


			p.SetState(934)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(935)
			p.Match(ModelicaParserT__84)
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(937)
			p.Vector()
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(938)
			p.Match(ModelicaParserT__17)
		}

	}


	return localctx
}


// IVectorContext is an interface to support dynamic dispatch.
type IVectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVectorContext differentiates from other interfaces.
	IsVectorContext()
}

type VectorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVectorContext() *VectorContext {
	var p = new(VectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_vector
	return p
}

func (*VectorContext) IsVectorContext() {}

func NewVectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VectorContext {
	var p = new(VectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_vector

	return p
}

func (s *VectorContext) GetParser() antlr.Parser { return s.parser }

func (s *VectorContext) Function_arguments() IFunction_argumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_argumentsContext)
}

func (s *VectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *VectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterVector(s)
	}
}

func (s *VectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitVector(s)
	}
}




func (p *ModelicaParser) Vector() (localctx IVectorContext) {
	localctx = NewVectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, ModelicaParserRULE_vector)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(941)
		p.Match(ModelicaParserT__85)
	}
	{
		p.SetState(942)
		p.Function_arguments()
	}
	{
		p.SetState(943)
		p.Match(ModelicaParserT__36)
	}



	return localctx
}


// INameContext is an interface to support dynamic dispatch.
type INameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameContext differentiates from other interfaces.
	IsNameContext()
}

type NameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameContext() *NameContext {
	var p = new(NameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_name
	return p
}

func (*NameContext) IsNameContext() {}

func NewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameContext {
	var p = new(NameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_name

	return p
}

func (s *NameContext) GetParser() antlr.Parser { return s.parser }

func (s *NameContext) AllIDENT() []antlr.TerminalNode {
	return s.GetTokens(ModelicaParserIDENT)
}

func (s *NameContext) IDENT(i int) antlr.TerminalNode {
	return s.GetToken(ModelicaParserIDENT, i)
}

func (s *NameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterName(s)
	}
}

func (s *NameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitName(s)
	}
}




func (p *ModelicaParser) Name() (localctx INameContext) {
	localctx = NewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, ModelicaParserRULE_name)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(946)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__86 {
		{
			p.SetState(945)
			p.Match(ModelicaParserT__86)
		}

	}
	{
		p.SetState(948)
		p.Match(ModelicaParserIDENT)
	}
	p.SetState(953)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ModelicaParserT__86 {
		{
			p.SetState(949)
			p.Match(ModelicaParserT__86)
		}
		{
			p.SetState(950)
			p.Match(ModelicaParserIDENT)
		}


		p.SetState(955)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IComponent_referenceContext is an interface to support dynamic dispatch.
type IComponent_referenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComponent_referenceContext differentiates from other interfaces.
	IsComponent_referenceContext()
}

type Component_referenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComponent_referenceContext() *Component_referenceContext {
	var p = new(Component_referenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_component_reference
	return p
}

func (*Component_referenceContext) IsComponent_referenceContext() {}

func NewComponent_referenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Component_referenceContext {
	var p = new(Component_referenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_component_reference

	return p
}

func (s *Component_referenceContext) GetParser() antlr.Parser { return s.parser }

func (s *Component_referenceContext) AllIDENT() []antlr.TerminalNode {
	return s.GetTokens(ModelicaParserIDENT)
}

func (s *Component_referenceContext) IDENT(i int) antlr.TerminalNode {
	return s.GetToken(ModelicaParserIDENT, i)
}

func (s *Component_referenceContext) AllArray_subscripts() []IArray_subscriptsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IArray_subscriptsContext)(nil)).Elem())
	var tst = make([]IArray_subscriptsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IArray_subscriptsContext)
		}
	}

	return tst
}

func (s *Component_referenceContext) Array_subscripts(i int) IArray_subscriptsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_subscriptsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IArray_subscriptsContext)
}

func (s *Component_referenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Component_referenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Component_referenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterComponent_reference(s)
	}
}

func (s *Component_referenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitComponent_reference(s)
	}
}




func (p *ModelicaParser) Component_reference() (localctx IComponent_referenceContext) {
	localctx = NewComponent_referenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, ModelicaParserRULE_component_reference)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(957)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__86 {
		{
			p.SetState(956)
			p.Match(ModelicaParserT__86)
		}

	}
	{
		p.SetState(959)
		p.Match(ModelicaParserIDENT)
	}
	p.SetState(961)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__83 {
		{
			p.SetState(960)
			p.Array_subscripts()
		}

	}
	p.SetState(970)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ModelicaParserT__86 {
		{
			p.SetState(963)
			p.Match(ModelicaParserT__86)
		}
		{
			p.SetState(964)
			p.Match(ModelicaParserIDENT)
		}
		p.SetState(966)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserT__83 {
			{
				p.SetState(965)
				p.Array_subscripts()
			}

		}


		p.SetState(972)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IFunction_call_argsContext is an interface to support dynamic dispatch.
type IFunction_call_argsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_call_argsContext differentiates from other interfaces.
	IsFunction_call_argsContext()
}

type Function_call_argsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_call_argsContext() *Function_call_argsContext {
	var p = new(Function_call_argsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_function_call_args
	return p
}

func (*Function_call_argsContext) IsFunction_call_argsContext() {}

func NewFunction_call_argsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_call_argsContext {
	var p = new(Function_call_argsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_function_call_args

	return p
}

func (s *Function_call_argsContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_call_argsContext) Function_arguments() IFunction_argumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_argumentsContext)
}

func (s *Function_call_argsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_call_argsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Function_call_argsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterFunction_call_args(s)
	}
}

func (s *Function_call_argsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitFunction_call_args(s)
	}
}




func (p *ModelicaParser) Function_call_args() (localctx IFunction_call_argsContext) {
	localctx = NewFunction_call_argsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, ModelicaParserRULE_function_call_args)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(973)
		p.Match(ModelicaParserT__21)
	}
	p.SetState(975)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ModelicaParserT__16) | (1 << ModelicaParserT__17) | (1 << ModelicaParserT__21) | (1 << ModelicaParserT__24))) != 0) || ((((_la - 46)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 46))) & ((1 << (ModelicaParserT__45 - 46)) | (1 << (ModelicaParserT__48 - 46)) | (1 << (ModelicaParserT__65 - 46)) | (1 << (ModelicaParserT__72 - 46)) | (1 << (ModelicaParserT__73 - 46)) | (1 << (ModelicaParserT__74 - 46)) | (1 << (ModelicaParserT__75 - 46)))) != 0) || ((((_la - 82)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 82))) & ((1 << (ModelicaParserT__81 - 82)) | (1 << (ModelicaParserT__82 - 82)) | (1 << (ModelicaParserT__83 - 82)) | (1 << (ModelicaParserT__85 - 82)) | (1 << (ModelicaParserT__86 - 82)) | (1 << (ModelicaParserIDENT - 82)) | (1 << (ModelicaParserSTRING - 82)) | (1 << (ModelicaParserUNSIGNED_NUMBER - 82)))) != 0) {
		{
			p.SetState(974)
			p.Function_arguments()
		}

	}
	{
		p.SetState(977)
		p.Match(ModelicaParserT__23)
	}



	return localctx
}


// IFunction_argumentsContext is an interface to support dynamic dispatch.
type IFunction_argumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_argumentsContext differentiates from other interfaces.
	IsFunction_argumentsContext()
}

type Function_argumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_argumentsContext() *Function_argumentsContext {
	var p = new(Function_argumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_function_arguments
	return p
}

func (*Function_argumentsContext) IsFunction_argumentsContext() {}

func NewFunction_argumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_argumentsContext {
	var p = new(Function_argumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_function_arguments

	return p
}

func (s *Function_argumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_argumentsContext) Function_argument() IFunction_argumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_argumentContext)
}

func (s *Function_argumentsContext) Function_arguments() IFunction_argumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_argumentsContext)
}

func (s *Function_argumentsContext) For_indices() IFor_indicesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_indicesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_indicesContext)
}

func (s *Function_argumentsContext) Named_arguments() INamed_argumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamed_argumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamed_argumentsContext)
}

func (s *Function_argumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_argumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Function_argumentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterFunction_arguments(s)
	}
}

func (s *Function_argumentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitFunction_arguments(s)
	}
}




func (p *ModelicaParser) Function_arguments() (localctx IFunction_argumentsContext) {
	localctx = NewFunction_argumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, ModelicaParserRULE_function_arguments)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(987)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 147, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(979)
			p.Function_argument()
		}
		p.SetState(984)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case ModelicaParserT__25:
			{
				p.SetState(980)
				p.Match(ModelicaParserT__25)
			}
			{
				p.SetState(981)
				p.Function_arguments()
			}


		case ModelicaParserT__56:
			{
				p.SetState(982)
				p.Match(ModelicaParserT__56)
			}
			{
				p.SetState(983)
				p.For_indices()
			}


		case ModelicaParserT__23, ModelicaParserT__36:



		default:
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(986)
			p.Named_arguments()
		}

	}


	return localctx
}


// INamed_argumentsContext is an interface to support dynamic dispatch.
type INamed_argumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamed_argumentsContext differentiates from other interfaces.
	IsNamed_argumentsContext()
}

type Named_argumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamed_argumentsContext() *Named_argumentsContext {
	var p = new(Named_argumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_named_arguments
	return p
}

func (*Named_argumentsContext) IsNamed_argumentsContext() {}

func NewNamed_argumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Named_argumentsContext {
	var p = new(Named_argumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_named_arguments

	return p
}

func (s *Named_argumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *Named_argumentsContext) Named_argument() INamed_argumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamed_argumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamed_argumentContext)
}

func (s *Named_argumentsContext) Named_arguments() INamed_argumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamed_argumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamed_argumentsContext)
}

func (s *Named_argumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Named_argumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Named_argumentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterNamed_arguments(s)
	}
}

func (s *Named_argumentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitNamed_arguments(s)
	}
}




func (p *ModelicaParser) Named_arguments() (localctx INamed_argumentsContext) {
	localctx = NewNamed_argumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, ModelicaParserRULE_named_arguments)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(989)
		p.Named_argument()
	}
	p.SetState(992)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__25 {
		{
			p.SetState(990)
			p.Match(ModelicaParserT__25)
		}
		{
			p.SetState(991)
			p.Named_arguments()
		}

	}



	return localctx
}


// INamed_argumentContext is an interface to support dynamic dispatch.
type INamed_argumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamed_argumentContext differentiates from other interfaces.
	IsNamed_argumentContext()
}

type Named_argumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamed_argumentContext() *Named_argumentContext {
	var p = new(Named_argumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_named_argument
	return p
}

func (*Named_argumentContext) IsNamed_argumentContext() {}

func NewNamed_argumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Named_argumentContext {
	var p = new(Named_argumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_named_argument

	return p
}

func (s *Named_argumentContext) GetParser() antlr.Parser { return s.parser }

func (s *Named_argumentContext) IDENT() antlr.TerminalNode {
	return s.GetToken(ModelicaParserIDENT, 0)
}

func (s *Named_argumentContext) Function_argument() IFunction_argumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_argumentContext)
}

func (s *Named_argumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Named_argumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Named_argumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterNamed_argument(s)
	}
}

func (s *Named_argumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitNamed_argument(s)
	}
}




func (p *ModelicaParser) Named_argument() (localctx INamed_argumentContext) {
	localctx = NewNamed_argumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, ModelicaParserRULE_named_argument)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(994)
		p.Match(ModelicaParserIDENT)
	}
	{
		p.SetState(995)
		p.Match(ModelicaParserT__19)
	}
	{
		p.SetState(996)
		p.Function_argument()
	}



	return localctx
}


// IFunction_argumentContext is an interface to support dynamic dispatch.
type IFunction_argumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_argumentContext differentiates from other interfaces.
	IsFunction_argumentContext()
}

type Function_argumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_argumentContext() *Function_argumentContext {
	var p = new(Function_argumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_function_argument
	return p
}

func (*Function_argumentContext) IsFunction_argumentContext() {}

func NewFunction_argumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_argumentContext {
	var p = new(Function_argumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_function_argument

	return p
}

func (s *Function_argumentContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_argumentContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Function_argumentContext) Named_arguments() INamed_argumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamed_argumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamed_argumentsContext)
}

func (s *Function_argumentContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Function_argumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_argumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Function_argumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterFunction_argument(s)
	}
}

func (s *Function_argumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitFunction_argument(s)
	}
}




func (p *ModelicaParser) Function_argument() (localctx IFunction_argumentContext) {
	localctx = NewFunction_argumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, ModelicaParserRULE_function_argument)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1007)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ModelicaParserT__16:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(998)
			p.Match(ModelicaParserT__16)
		}
		{
			p.SetState(999)
			p.Name()
		}
		{
			p.SetState(1000)
			p.Match(ModelicaParserT__21)
		}
		p.SetState(1002)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ModelicaParserIDENT {
			{
				p.SetState(1001)
				p.Named_arguments()
			}

		}
		{
			p.SetState(1004)
			p.Match(ModelicaParserT__23)
		}


	case ModelicaParserT__17, ModelicaParserT__21, ModelicaParserT__24, ModelicaParserT__45, ModelicaParserT__48, ModelicaParserT__65, ModelicaParserT__72, ModelicaParserT__73, ModelicaParserT__74, ModelicaParserT__75, ModelicaParserT__81, ModelicaParserT__82, ModelicaParserT__83, ModelicaParserT__85, ModelicaParserT__86, ModelicaParserIDENT, ModelicaParserSTRING, ModelicaParserUNSIGNED_NUMBER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1006)
			p.Expression()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IOutput_expression_listContext is an interface to support dynamic dispatch.
type IOutput_expression_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOutput_expression_listContext differentiates from other interfaces.
	IsOutput_expression_listContext()
}

type Output_expression_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOutput_expression_listContext() *Output_expression_listContext {
	var p = new(Output_expression_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_output_expression_list
	return p
}

func (*Output_expression_listContext) IsOutput_expression_listContext() {}

func NewOutput_expression_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Output_expression_listContext {
	var p = new(Output_expression_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_output_expression_list

	return p
}

func (s *Output_expression_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Output_expression_listContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Output_expression_listContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Output_expression_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Output_expression_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Output_expression_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterOutput_expression_list(s)
	}
}

func (s *Output_expression_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitOutput_expression_list(s)
	}
}




func (p *ModelicaParser) Output_expression_list() (localctx IOutput_expression_listContext) {
	localctx = NewOutput_expression_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, ModelicaParserRULE_output_expression_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1010)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if ((((_la - 18)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 18))) & ((1 << (ModelicaParserT__17 - 18)) | (1 << (ModelicaParserT__21 - 18)) | (1 << (ModelicaParserT__24 - 18)) | (1 << (ModelicaParserT__45 - 18)) | (1 << (ModelicaParserT__48 - 18)))) != 0) || ((((_la - 66)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 66))) & ((1 << (ModelicaParserT__65 - 66)) | (1 << (ModelicaParserT__72 - 66)) | (1 << (ModelicaParserT__73 - 66)) | (1 << (ModelicaParserT__74 - 66)) | (1 << (ModelicaParserT__75 - 66)) | (1 << (ModelicaParserT__81 - 66)) | (1 << (ModelicaParserT__82 - 66)) | (1 << (ModelicaParserT__83 - 66)) | (1 << (ModelicaParserT__85 - 66)) | (1 << (ModelicaParserT__86 - 66)) | (1 << (ModelicaParserIDENT - 66)) | (1 << (ModelicaParserSTRING - 66)) | (1 << (ModelicaParserUNSIGNED_NUMBER - 66)))) != 0) {
		{
			p.SetState(1009)
			p.Expression()
		}

	}
	p.SetState(1018)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ModelicaParserT__25 {
		{
			p.SetState(1012)
			p.Match(ModelicaParserT__25)
		}
		p.SetState(1014)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if ((((_la - 18)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 18))) & ((1 << (ModelicaParserT__17 - 18)) | (1 << (ModelicaParserT__21 - 18)) | (1 << (ModelicaParserT__24 - 18)) | (1 << (ModelicaParserT__45 - 18)) | (1 << (ModelicaParserT__48 - 18)))) != 0) || ((((_la - 66)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 66))) & ((1 << (ModelicaParserT__65 - 66)) | (1 << (ModelicaParserT__72 - 66)) | (1 << (ModelicaParserT__73 - 66)) | (1 << (ModelicaParserT__74 - 66)) | (1 << (ModelicaParserT__75 - 66)) | (1 << (ModelicaParserT__81 - 66)) | (1 << (ModelicaParserT__82 - 66)) | (1 << (ModelicaParserT__83 - 66)) | (1 << (ModelicaParserT__85 - 66)) | (1 << (ModelicaParserT__86 - 66)) | (1 << (ModelicaParserIDENT - 66)) | (1 << (ModelicaParserSTRING - 66)) | (1 << (ModelicaParserUNSIGNED_NUMBER - 66)))) != 0) {
			{
				p.SetState(1013)
				p.Expression()
			}

		}


		p.SetState(1020)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IExpression_listContext is an interface to support dynamic dispatch.
type IExpression_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_listContext differentiates from other interfaces.
	IsExpression_listContext()
}

type Expression_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_listContext() *Expression_listContext {
	var p = new(Expression_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_expression_list
	return p
}

func (*Expression_listContext) IsExpression_listContext() {}

func NewExpression_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_listContext {
	var p = new(Expression_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_expression_list

	return p
}

func (s *Expression_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_listContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Expression_listContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Expression_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterExpression_list(s)
	}
}

func (s *Expression_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitExpression_list(s)
	}
}




func (p *ModelicaParser) Expression_list() (localctx IExpression_listContext) {
	localctx = NewExpression_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, ModelicaParserRULE_expression_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1021)
		p.Expression()
	}
	p.SetState(1026)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ModelicaParserT__25 {
		{
			p.SetState(1022)
			p.Match(ModelicaParserT__25)
		}
		{
			p.SetState(1023)
			p.Expression()
		}


		p.SetState(1028)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IArray_subscriptsContext is an interface to support dynamic dispatch.
type IArray_subscriptsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArray_subscriptsContext differentiates from other interfaces.
	IsArray_subscriptsContext()
}

type Array_subscriptsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_subscriptsContext() *Array_subscriptsContext {
	var p = new(Array_subscriptsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_array_subscripts
	return p
}

func (*Array_subscriptsContext) IsArray_subscriptsContext() {}

func NewArray_subscriptsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_subscriptsContext {
	var p = new(Array_subscriptsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_array_subscripts

	return p
}

func (s *Array_subscriptsContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_subscriptsContext) AllSubscript() []ISubscriptContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISubscriptContext)(nil)).Elem())
	var tst = make([]ISubscriptContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISubscriptContext)
		}
	}

	return tst
}

func (s *Array_subscriptsContext) Subscript(i int) ISubscriptContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubscriptContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISubscriptContext)
}

func (s *Array_subscriptsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_subscriptsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Array_subscriptsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterArray_subscripts(s)
	}
}

func (s *Array_subscriptsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitArray_subscripts(s)
	}
}




func (p *ModelicaParser) Array_subscripts() (localctx IArray_subscriptsContext) {
	localctx = NewArray_subscriptsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, ModelicaParserRULE_array_subscripts)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1029)
		p.Match(ModelicaParserT__83)
	}
	{
		p.SetState(1030)
		p.Subscript()
	}
	p.SetState(1035)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ModelicaParserT__25 {
		{
			p.SetState(1031)
			p.Match(ModelicaParserT__25)
		}
		{
			p.SetState(1032)
			p.Subscript()
		}


		p.SetState(1037)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1038)
		p.Match(ModelicaParserT__84)
	}



	return localctx
}


// ISubscriptContext is an interface to support dynamic dispatch.
type ISubscriptContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubscriptContext differentiates from other interfaces.
	IsSubscriptContext()
}

type SubscriptContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubscriptContext() *SubscriptContext {
	var p = new(SubscriptContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_subscript
	return p
}

func (*SubscriptContext) IsSubscriptContext() {}

func NewSubscriptContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubscriptContext {
	var p = new(SubscriptContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_subscript

	return p
}

func (s *SubscriptContext) GetParser() antlr.Parser { return s.parser }

func (s *SubscriptContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SubscriptContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubscriptContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *SubscriptContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterSubscript(s)
	}
}

func (s *SubscriptContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitSubscript(s)
	}
}




func (p *ModelicaParser) Subscript() (localctx ISubscriptContext) {
	localctx = NewSubscriptContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, ModelicaParserRULE_subscript)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1042)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ModelicaParserT__22:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1040)
			p.Match(ModelicaParserT__22)
		}


	case ModelicaParserT__17, ModelicaParserT__21, ModelicaParserT__24, ModelicaParserT__45, ModelicaParserT__48, ModelicaParserT__65, ModelicaParserT__72, ModelicaParserT__73, ModelicaParserT__74, ModelicaParserT__75, ModelicaParserT__81, ModelicaParserT__82, ModelicaParserT__83, ModelicaParserT__85, ModelicaParserT__86, ModelicaParserIDENT, ModelicaParserSTRING, ModelicaParserUNSIGNED_NUMBER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1041)
			p.Expression()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ICommentContext is an interface to support dynamic dispatch.
type ICommentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCommentContext differentiates from other interfaces.
	IsCommentContext()
}

type CommentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommentContext() *CommentContext {
	var p = new(CommentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_comment
	return p
}

func (*CommentContext) IsCommentContext() {}

func NewCommentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CommentContext {
	var p = new(CommentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_comment

	return p
}

func (s *CommentContext) GetParser() antlr.Parser { return s.parser }

func (s *CommentContext) String_comment() IString_commentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_commentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_commentContext)
}

func (s *CommentContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *CommentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CommentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *CommentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterComment(s)
	}
}

func (s *CommentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitComment(s)
	}
}




func (p *ModelicaParser) Comment() (localctx ICommentContext) {
	localctx = NewCommentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, ModelicaParserRULE_comment)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1044)
		p.String_comment()
	}
	p.SetState(1046)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ModelicaParserT__87 {
		{
			p.SetState(1045)
			p.Annotation()
		}

	}



	return localctx
}


// IString_commentContext is an interface to support dynamic dispatch.
type IString_commentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsString_commentContext differentiates from other interfaces.
	IsString_commentContext()
}

type String_commentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_commentContext() *String_commentContext {
	var p = new(String_commentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_string_comment
	return p
}

func (*String_commentContext) IsString_commentContext() {}

func NewString_commentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_commentContext {
	var p = new(String_commentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_string_comment

	return p
}

func (s *String_commentContext) GetParser() antlr.Parser { return s.parser }

func (s *String_commentContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(ModelicaParserSTRING)
}

func (s *String_commentContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(ModelicaParserSTRING, i)
}

func (s *String_commentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_commentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *String_commentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterString_comment(s)
	}
}

func (s *String_commentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitString_comment(s)
	}
}




func (p *ModelicaParser) String_comment() (localctx IString_commentContext) {
	localctx = NewString_commentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, ModelicaParserRULE_string_comment)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1048)
		p.Match(ModelicaParserSTRING)
	}
	p.SetState(1053)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ModelicaParserT__72 {
		{
			p.SetState(1049)
			p.Match(ModelicaParserT__72)
		}
		{
			p.SetState(1050)
			p.Match(ModelicaParserSTRING)
		}


		p.SetState(1055)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IAnnotationContext is an interface to support dynamic dispatch.
type IAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationContext differentiates from other interfaces.
	IsAnnotationContext()
}

type AnnotationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationContext() *AnnotationContext {
	var p = new(AnnotationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ModelicaParserRULE_annotation
	return p
}

func (*AnnotationContext) IsAnnotationContext() {}

func NewAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationContext {
	var p = new(AnnotationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ModelicaParserRULE_annotation

	return p
}

func (s *AnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationContext) Class_modification() IClass_modificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_modificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_modificationContext)
}

func (s *AnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AnnotationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.EnterAnnotation(s)
	}
}

func (s *AnnotationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ModelicaListener); ok {
		listenerT.ExitAnnotation(s)
	}
}




func (p *ModelicaParser) Annotation() (localctx IAnnotationContext) {
	localctx = NewAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, ModelicaParserRULE_annotation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1056)
		p.Match(ModelicaParserT__87)
	}
	{
		p.SetState(1057)
		p.Class_modification()
	}



	return localctx
}


